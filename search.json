[{"path":"https://darwin-eu-dev.github.io/omopgenerics/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"Apache License","title":"Apache License","text":"Version 2.0, January 2004 <http://www.apache.org/licenses/>","code":""},{"path":[]},{"path":"https://darwin-eu-dev.github.io/omopgenerics/LICENSE.html","id":"id_1-definitions","dir":"","previous_headings":"Terms and Conditions for use, reproduction, and distribution","what":"1. Definitions","title":"Apache License","text":"“License” shall mean terms conditions use, reproduction, distribution defined Sections 1 9 document. “Licensor” shall mean copyright owner entity authorized copyright owner granting License. “Legal Entity” shall mean union acting entity entities control, controlled , common control entity. purposes definition, “control” means () power, direct indirect, cause direction management entity, whether contract otherwise, (ii) ownership fifty percent (50%) outstanding shares, (iii) beneficial ownership entity. “” (“”) shall mean individual Legal Entity exercising permissions granted License. “Source” form shall mean preferred form making modifications, including limited software source code, documentation source, configuration files. “Object” form shall mean form resulting mechanical transformation translation Source form, including limited compiled object code, generated documentation, conversions media types. “Work” shall mean work authorship, whether Source Object form, made available License, indicated copyright notice included attached work (example provided Appendix ). “Derivative Works” shall mean work, whether Source Object form, based (derived ) Work editorial revisions, annotations, elaborations, modifications represent, whole, original work authorship. purposes License, Derivative Works shall include works remain separable , merely link (bind name) interfaces , Work Derivative Works thereof. “Contribution” shall mean work authorship, including original version Work modifications additions Work Derivative Works thereof, intentionally submitted Licensor inclusion Work copyright owner individual Legal Entity authorized submit behalf copyright owner. purposes definition, “submitted” means form electronic, verbal, written communication sent Licensor representatives, including limited communication electronic mailing lists, source code control systems, issue tracking systems managed , behalf , Licensor purpose discussing improving Work, excluding communication conspicuously marked otherwise designated writing copyright owner “Contribution.” “Contributor” shall mean Licensor individual Legal Entity behalf Contribution received Licensor subsequently incorporated within Work.","code":""},{"path":"https://darwin-eu-dev.github.io/omopgenerics/LICENSE.html","id":"id_2-grant-of-copyright-license","dir":"","previous_headings":"Terms and Conditions for use, reproduction, and distribution","what":"2. Grant of Copyright License","title":"Apache License","text":"Subject terms conditions License, Contributor hereby grants perpetual, worldwide, non-exclusive, -charge, royalty-free, irrevocable copyright license reproduce, prepare Derivative Works , publicly display, publicly perform, sublicense, distribute Work Derivative Works Source Object form.","code":""},{"path":"https://darwin-eu-dev.github.io/omopgenerics/LICENSE.html","id":"id_3-grant-of-patent-license","dir":"","previous_headings":"Terms and Conditions for use, reproduction, and distribution","what":"3. Grant of Patent License","title":"Apache License","text":"Subject terms conditions License, Contributor hereby grants perpetual, worldwide, non-exclusive, -charge, royalty-free, irrevocable (except stated section) patent license make, made, use, offer sell, sell, import, otherwise transfer Work, license applies patent claims licensable Contributor necessarily infringed Contribution(s) alone combination Contribution(s) Work Contribution(s) submitted. institute patent litigation entity (including cross-claim counterclaim lawsuit) alleging Work Contribution incorporated within Work constitutes direct contributory patent infringement, patent licenses granted License Work shall terminate date litigation filed.","code":""},{"path":"https://darwin-eu-dev.github.io/omopgenerics/LICENSE.html","id":"id_4-redistribution","dir":"","previous_headings":"Terms and Conditions for use, reproduction, and distribution","what":"4. Redistribution","title":"Apache License","text":"may reproduce distribute copies Work Derivative Works thereof medium, without modifications, Source Object form, provided meet following conditions: () must give recipients Work Derivative Works copy License; (b) must cause modified files carry prominent notices stating changed files; (c) must retain, Source form Derivative Works distribute, copyright, patent, trademark, attribution notices Source form Work, excluding notices pertain part Derivative Works; (d) Work includes “NOTICE” text file part distribution, Derivative Works distribute must include readable copy attribution notices contained within NOTICE file, excluding notices pertain part Derivative Works, least one following places: within NOTICE text file distributed part Derivative Works; within Source form documentation, provided along Derivative Works; , within display generated Derivative Works, wherever third-party notices normally appear. contents NOTICE file informational purposes modify License. may add attribution notices within Derivative Works distribute, alongside addendum NOTICE text Work, provided additional attribution notices construed modifying License. may add copyright statement modifications may provide additional different license terms conditions use, reproduction, distribution modifications, Derivative Works whole, provided use, reproduction, distribution Work otherwise complies conditions stated License.","code":""},{"path":"https://darwin-eu-dev.github.io/omopgenerics/LICENSE.html","id":"id_5-submission-of-contributions","dir":"","previous_headings":"Terms and Conditions for use, reproduction, and distribution","what":"5. Submission of Contributions","title":"Apache License","text":"Unless explicitly state otherwise, Contribution intentionally submitted inclusion Work Licensor shall terms conditions License, without additional terms conditions. Notwithstanding , nothing herein shall supersede modify terms separate license agreement may executed Licensor regarding Contributions.","code":""},{"path":"https://darwin-eu-dev.github.io/omopgenerics/LICENSE.html","id":"id_6-trademarks","dir":"","previous_headings":"Terms and Conditions for use, reproduction, and distribution","what":"6. Trademarks","title":"Apache License","text":"License grant permission use trade names, trademarks, service marks, product names Licensor, except required reasonable customary use describing origin Work reproducing content NOTICE file.","code":""},{"path":"https://darwin-eu-dev.github.io/omopgenerics/LICENSE.html","id":"id_7-disclaimer-of-warranty","dir":"","previous_headings":"Terms and Conditions for use, reproduction, and distribution","what":"7. Disclaimer of Warranty","title":"Apache License","text":"Unless required applicable law agreed writing, Licensor provides Work (Contributor provides Contributions) “” BASIS, WITHOUT WARRANTIES CONDITIONS KIND, either express implied, including, without limitation, warranties conditions TITLE, NON-INFRINGEMENT, MERCHANTABILITY, FITNESS PARTICULAR PURPOSE. solely responsible determining appropriateness using redistributing Work assume risks associated exercise permissions License.","code":""},{"path":"https://darwin-eu-dev.github.io/omopgenerics/LICENSE.html","id":"id_8-limitation-of-liability","dir":"","previous_headings":"Terms and Conditions for use, reproduction, and distribution","what":"8. Limitation of Liability","title":"Apache License","text":"event legal theory, whether tort (including negligence), contract, otherwise, unless required applicable law (deliberate grossly negligent acts) agreed writing, shall Contributor liable damages, including direct, indirect, special, incidental, consequential damages character arising result License use inability use Work (including limited damages loss goodwill, work stoppage, computer failure malfunction, commercial damages losses), even Contributor advised possibility damages.","code":""},{"path":"https://darwin-eu-dev.github.io/omopgenerics/LICENSE.html","id":"id_9-accepting-warranty-or-additional-liability","dir":"","previous_headings":"Terms and Conditions for use, reproduction, and distribution","what":"9. Accepting Warranty or Additional Liability","title":"Apache License","text":"redistributing Work Derivative Works thereof, may choose offer, charge fee , acceptance support, warranty, indemnity, liability obligations /rights consistent License. However, accepting obligations, may act behalf sole responsibility, behalf Contributor, agree indemnify, defend, hold Contributor harmless liability incurred , claims asserted , Contributor reason accepting warranty additional liability. END TERMS CONDITIONS","code":""},{"path":"https://darwin-eu-dev.github.io/omopgenerics/LICENSE.html","id":"appendix-how-to-apply-the-apache-license-to-your-work","dir":"","previous_headings":"","what":"APPENDIX: How to apply the Apache License to your work","title":"Apache License","text":"apply Apache License work, attach following boilerplate notice, fields enclosed brackets [] replaced identifying information. (Don’t include brackets!) text enclosed appropriate comment syntax file format. also recommend file class name description purpose included “printed page” copyright notice easier identification within third-party archives.","code":"Copyright [yyyy] [name of copyright owner]  Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with the License. You may obtain a copy of the License at    http://www.apache.org/licenses/LICENSE-2.0  Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language governing permissions and limitations under the License."},{"path":"https://darwin-eu-dev.github.io/omopgenerics/articles/cdm_reference.html","id":"standard-omop-cdm-tables","dir":"Articles","previous_headings":"","what":"1) Standard OMOP CDM tables","title":"The cdm reference","text":"multiple versions OMOP CDM. list tables included version 5.3 follows. standard OMOP tables required fields. can check required column person table, example, like ","code":"library(omopgenerics) #>  #> Attaching package: 'omopgenerics' #> The following object is masked from 'package:stats': #>  #>     filter omopTables() #>  [1] \"person\"                \"observation_period\"    \"visit_occurrence\"      #>  [4] \"visit_detail\"          \"condition_occurrence\"  \"drug_exposure\"         #>  [7] \"procedure_occurrence\"  \"device_exposure\"       \"measurement\"           #> [10] \"observation\"           \"death\"                 \"note\"                  #> [13] \"note_nlp\"              \"specimen\"              \"fact_relationship\"     #> [16] \"location\"              \"care_site\"             \"provider\"              #> [19] \"payer_plan_period\"     \"cost\"                  \"drug_era\"              #> [22] \"dose_era\"              \"condition_era\"         \"metadata\"              #> [25] \"cdm_source\"            \"concept\"               \"vocabulary\"            #> [28] \"domain\"                \"concept_class\"         \"concept_relationship\"  #> [31] \"relationship\"          \"concept_synonym\"       \"concept_ancestor\"      #> [34] \"source_to_concept_map\" \"drug_strength\"         \"cohort_definition\"     #> [37] \"attribute_definition\"  \"concept_recommended\" omopColumns(table = \"person\", version = \"5.3\") #> [1] \"person_id\"            \"gender_concept_id\"    \"year_of_birth\"        #> [4] \"race_concept_id\"      \"ethnicity_concept_id\" omopColumns(table = \"observation_period\", version = \"5.3\") #> [1] \"observation_period_id\"         \"person_id\"                     #> [3] \"observation_period_start_date\" \"observation_period_end_date\"   #> [5] \"period_type_concept_id\""},{"path":"https://darwin-eu-dev.github.io/omopgenerics/articles/cdm_reference.html","id":"cohort-tables","dir":"Articles","previous_headings":"","what":"2) Cohort tables","title":"The cdm reference","text":"Studies using OMOP CDM often create study-specific cohort tables. also consider part cdm reference created. cohort table associated specific class , generatedCohortSet, described subsequent vignette. standard OMOP CDM tables, cohort tables expected contain specific set fields (restriction placed whether include additional fields ).","code":"cohortColumns(table = \"cohort\", version = \"5.3\") #> [1] \"cohort_definition_id\" \"subject_id\"           \"cohort_start_date\"    #> [4] \"cohort_end_date\" cohortColumns(table = \"cohort_set\", version = \"5.3\") #> [1] \"cohort_definition_id\" \"cohort_name\" cohortColumns(table = \"cohort_attrition\", version = \"5.3\") #> [1] \"cohort_definition_id\" \"number_records\"       \"number_subjects\"      #> [4] \"reason_id\"            \"reason\"               \"excluded_records\"     #> [7] \"excluded_subjects\""},{"path":"https://darwin-eu-dev.github.io/omopgenerics/articles/cdm_reference.html","id":"achilles-result-tables","dir":"Articles","previous_headings":"","what":"3) Achilles result tables","title":"The cdm reference","text":"Achilles R package provides descriptive statistics OMOP CDM database. results Achilles stored tables database. following tables created given columns.","code":"achillesTables() #> [1] \"achilles_analysis\"     \"achilles_results\"      \"achilles_results_dist\" achillesColumns(\"achilles_analysis\") #> [1] \"analysis_id\"    \"analysis_name\"  \"stratum_1_name\" \"stratum_2_name\" #> [5] \"stratum_3_name\" \"stratum_4_name\" \"stratum_5_name\" \"is_default\"     #> [9] \"category\" achillesColumns(\"achilles_results\") #> [1] \"analysis_id\" \"stratum_1\"   \"stratum_2\"   \"stratum_3\"   \"stratum_4\"   #> [6] \"stratum_5\"   \"count_value\" achillesColumns(\"achilles_results_dist\") #>  [1] \"analysis_id\"  \"stratum_1\"    \"stratum_2\"    \"stratum_3\"    \"stratum_4\"    #>  [6] \"stratum_5\"    \"count_value\"  \"min_value\"    \"max_value\"    \"avg_value\"    #> [11] \"stdev_value\"  \"median_value\" \"p10_value\"    \"p25_value\"    \"p75_value\"    #> [16] \"p90_value\""},{"path":"https://darwin-eu-dev.github.io/omopgenerics/articles/cdm_reference.html","id":"other-tables","dir":"Articles","previous_headings":"","what":"4) Other tables","title":"The cdm reference","text":"Beyond standard OMOP CDM tables cohort tables, additional tables can added cdm reference. tables , example, OMOP extension/ expansion tables extra tables containing data required perform study normally included part OMOP CDM. tables contain set fields.","code":""},{"path":"https://darwin-eu-dev.github.io/omopgenerics/articles/cdm_reference.html","id":"general-rules-for-a-cdm-reference","dir":"Articles","previous_headings":"","what":"General rules for a cdm reference","title":"The cdm reference","text":"table part cdm object fulfill following conditions: tables must share common source (, mix tables database -memory permitted). name tables must lower snake_case. name column names table must lower snake_case. person observation_period tables must present. cdm reference must attribute “cdmName” gives name associated data contained within.","code":""},{"path":"https://darwin-eu-dev.github.io/omopgenerics/articles/cdm_reference.html","id":"export-metadata-about-the-cdm-reference","dir":"Articles","previous_headings":"","what":"Export metadata about the cdm reference","title":"The cdm reference","text":"export method applied cdm reference, metadata cdm written csv. csv contains following columns","code":""},{"path":"https://darwin-eu-dev.github.io/omopgenerics/articles/codelists.html","id":"codelist","dir":"Articles","previous_headings":"","what":"Codelist","title":"Concept sets","text":"concept set can represented either codelist concept set expression. codelist named list, item list containing specific concept IDs. codelist must named codelist missing values","code":"condition_codes <- list(\"diabetes\" = c(201820, 4087682, 3655269),                         \"asthma\" = 317009) condition_codes <- newCodelist(condition_codes) #> Warning: ! `codelist` contains numeric values, they are casted #> to integers.  condition_codes #>  #> - asthma (1 codes) #> - diabetes (3 codes) condition_codes <- list(c(201820, 4087682, 3655269)) newCodelist(condition_codes) #> Error in `newCodelist()`: #> ✖ `codelist` must be named. #> ! `codelist` must be a list with objects of class numeric, integer, and #>   integer64; it can not contain NA; it has to be named; it can not be NULL. condition_codes <- list(\"diabetes\" = c(201820, NA, 3655269),                         \"asthma\" = 317009) newCodelist(condition_codes) #> Warning: ! `codelist` contains numeric values, they are casted #> to integers. #> Error in `newCodelist()`: #> ! `diabetes` must not contain NA."},{"path":"https://darwin-eu-dev.github.io/omopgenerics/articles/codelists.html","id":"concept-set-expression","dir":"Articles","previous_headings":"","what":"Concept set expression","title":"Concept sets","text":"concept set expression provides high-level definition concepts , applied specific OMOP CDM vocabulary version (making use concept hierarchies relationships), result codelist. codelist, concept set expression must named list missing elements.","code":"condition_cs <- list(   \"diabetes\" = dplyr::tibble(     \"concept_id\" = c(201820, 4087682),     \"excluded\" = c(FALSE, FALSE),     \"descendants\" = c(TRUE, FALSE),     \"mapped\" = c(FALSE, FALSE)   ),   \"asthma\" = dplyr::tibble(     \"concept_id\" = 317009,     \"excluded\" = FALSE,     \"descendants\" = FALSE,     \"mapped\" = FALSE   ) ) condition_cs <- newConceptSetExpression(condition_cs)  condition_cs #>  #> - asthma (1 concept criteria) #> - diabetes (2 concept criteria) condition_cs <- list(   dplyr::tibble(     \"concept_id\" = c(201820, NA),     \"excluded\" = c(FALSE, FALSE),     \"descendants\" = c(TRUE, FALSE),     \"mapped\" = c(FALSE, FALSE)   )) newConceptSetExpression(condition_cs) #> Error in `newConceptSetExpression()`: #> ✖ `x` must be named. #> ! `x` must be a list with objects of class tbl; it can not contain NA; it has #>   to be named; it can not be NULL. condition_cs <- list(   \"diabetes\" = dplyr::tibble(     \"concept_id\" = c(201820, NA),     \"excluded\" = c(FALSE, FALSE),     \"descendants\" = c(TRUE, FALSE),     \"mapped\" = c(FALSE, FALSE)   ),   \"asthma\" = dplyr::tibble(     \"concept_id\" = 317009,     \"excluded\" = FALSE,     \"descendants\" = FALSE,     \"mapped\" = FALSE   ) ) newConceptSetExpression(condition_cs) #> Error in `newConceptSetExpression()`: #> ✖ `x[[i]]$concept_id` contains NA in position 2. #> ! `x[[i]]$concept_id` must be an integerish numeric; it can not contain NA; it #>   can not be NULL."},{"path":"https://darwin-eu-dev.github.io/omopgenerics/articles/cohorts.html","id":"cohort-table","dir":"Articles","previous_headings":"","what":"Cohort table","title":"Cohort tables","text":"cohort set people fulfill certain set criteria period time. omopgenerics defined cohort_table class allows us represent individuals cohort. cohort_table created using newCohortTable() function defined : cohort table. cohort set. cohort attrition. Let’s start creating cdm reference just two people. Now let’s say one people clinical event interest, can include cohort table can used part analysis. cohort table associated settings attrition. didn’t specify newCohortTable() automatically populated. can access cohort set cohort table using function settings() Meanwhile, can access cohort attrition cohort table using function attrition() Cohort attrition table also used compute number counts cohort (ie last row attrition). can seen function cohortCount(). Note cohort count taken last row attrition, make changes cohort update attrition go. can additional, optional, attribute keeps track concepts used create cohort. example codelist associated cohort. though associate cohort codelist one elements define cohort table fulfill certain criteria.","code":"person <- tibble(   person_id = c(1,2),   gender_concept_id = 0, year_of_birth = 1990,   race_concept_id = 0, ethnicity_concept_id = 0 ) observation_period <- dplyr::tibble(   observation_period_id = c(1,2), person_id = c(1,2),   observation_period_start_date = as.Date(\"2000-01-01\"),   observation_period_end_date = as.Date(\"2021-12-31\"),   period_type_concept_id = 0 ) cdm <- cdmFromTables(   tables = list(     \"person\" = person,     \"observation_period\" = observation_period   ),   cdmName = \"example_cdm\" ) #> Warning: ! 5 column in person do not match expected column type: #> • `person_id` is numeric but expected integer #> • `gender_concept_id` is numeric but expected integer #> • `year_of_birth` is numeric but expected integer #> • `race_concept_id` is numeric but expected integer #> • `ethnicity_concept_id` is numeric but expected integer #> Warning: ! 3 column in observation_period do not match expected column type: #> • `observation_period_id` is numeric but expected integer #> • `person_id` is numeric but expected integer #> • `period_type_concept_id` is numeric but expected integer cdm #>  #> ── # OMOP CDM reference (local) of example_cdm ───────────────────────────────── #> • omop tables: person, observation_period #> • cohort tables: - #> • achilles tables: - #> • other tables: - cohort <- tibble(   cohort_definition_id = 1, subject_id = 1,   cohort_start_date = as.Date(\"2020-01-01\"),   cohort_end_date = as.Date(\"2020-01-10\") ) cdm <- insertTable(cdm = cdm, name = \"cohort\", table = cohort) cdm$cohort <- newCohortTable(cdm$cohort) #> Warning: ! 2 column in cohort do not match expected column type: #> • `cohort_definition_id` is numeric but expected integer #> • `subject_id` is numeric but expected integer settings(cdm$cohort) #> # A tibble: 1 × 2 #>   cohort_definition_id cohort_name #>                  <int> <chr>       #> 1                    1 cohort_1 attrition(cdm$cohort) #> # A tibble: 1 × 7 #>   cohort_definition_id number_records number_subjects reason_id reason           #>                  <int>          <int>           <int>     <int> <chr>            #> 1                    1              1               1         1 Initial qualify… #> # ℹ 2 more variables: excluded_records <int>, excluded_subjects <int> cohortCount(cdm$cohort) #> # A tibble: 1 × 3 #>   cohort_definition_id number_records number_subjects #>                  <int>          <int>           <int> #> 1                    1              1               1 cdm$cohort <- cdm$cohort |>   filter(cohort_start_date == as.Date(\"2019-01-01\")) |>   compute(name = \"cohort\", temporary = FALSE) |>   recordCohortAttrition(\"Require cohort start January 1st 2019\") #> Warning: ! 1 casted column in cohort (cohort_attrition) as do not match expected column #>   type: #> • `cohort_definition_id` from numeric to integer #> Warning: ! 2 column in cohort do not match expected column type: #> • `cohort_definition_id` is numeric but expected integer #> • `subject_id` is numeric but expected integer attrition(cdm$cohort) #> # A tibble: 2 × 7 #>   cohort_definition_id number_records number_subjects reason_id reason           #>                  <int>          <int>           <int>     <int> <chr>            #> 1                    1              1               1         1 Initial qualify… #> 2                    1              0               0         2 Require cohort … #> # ℹ 2 more variables: excluded_records <int>, excluded_subjects <int> cohortCount(cdm$cohort) #> # A tibble: 1 × 3 #>   cohort_definition_id number_records number_subjects #>                  <int>          <int>           <int> #> 1                    1              0               0 cohortCodelist(cdm$cohort, cohortId = 1, type = \"index event\") #> Warning: No codelists found for the specified cohorts #>  #> ── 0 codelists ───────────────────────────────────────────────────────────────── cdm$cohort <- newCohortTable(cdm$cohort,                               cohortCodelistRef = dplyr::tibble(                                  cohort_definition_id = c(1,1),                                  codelist_name =c(\"disease X\", \"disease X\"),                                  concept_id = c(101,102),                                  type = \"index event\"                                )) #> Warning: ! 2 casted column in cohort (cohort_codelist) as do not match expected column #>   type: #> • `cohort_definition_id` from numeric to integer #> • `concept_id` from numeric to integer #> Warning: ! 2 column in cohort do not match expected column type: #> • `cohort_definition_id` is numeric but expected integer #> • `subject_id` is numeric but expected integer cohortCodelist(cdm$cohort, cohortId = 1, type = \"index event\") #>  #> ── 1 codelist ────────────────────────────────────────────────────────────────── #>  #> - disease X (2 codes)"},{"path":"https://darwin-eu-dev.github.io/omopgenerics/articles/cohorts.html","id":"cohort-set","dir":"Articles","previous_headings":"Cohort table","what":"Cohort Set","title":"Cohort tables","text":"cohort set must table : Lower case column names. least cohort_definition_id, cohort_name columns (cohortColumns(\"cohort_set\")). cohort_name must contain unique cohort names (currently cased snake case). cohort_definition_id must contain unique cohort ids, ids present table must present cohort set ids must present cohort attrition.","code":""},{"path":"https://darwin-eu-dev.github.io/omopgenerics/articles/cohorts.html","id":"cohort-attrition","dir":"Articles","previous_headings":"Cohort table","what":"Cohort Attrition","title":"Cohort tables","text":"cohort attrition must table : Lower case column names. least cohort_definition_id, number_records, number_subjects, reason_id, reason, excluded_records, excluded_subjects columns (cohortColumns(\"cohort_attrition\")). cohort_definition_id must contain cohort ids, ids present table must present cohort attrition ids must present cohort set. must exist unique pairs cohort_definition_id reason_id.","code":""},{"path":"https://darwin-eu-dev.github.io/omopgenerics/articles/cohorts.html","id":"cohort-codelist","dir":"Articles","previous_headings":"Cohort table","what":"Cohort Codelist","title":"Cohort tables","text":"cohort codelist must table : Lower case column names. least cohort_definition_id, codelist_name, concept_id, type columns (cohortColumns(\"cohort_codelist\")). cohort_definition_id must contain cohort ids, ids present table must present cohort attrition ids must present cohort set. type must one “index event”, “inclusion criteria”, “exit criteria”","code":""},{"path":"https://darwin-eu-dev.github.io/omopgenerics/articles/cohorts.html","id":"cohort-table-1","dir":"Articles","previous_headings":"Cohort table","what":"Cohort Table","title":"Cohort tables","text":"cohort table must table : comes cdm_reference (extracted via cdm$cohort). source cdm_reference. Lower case column names. least cohort_definition_id, subject_id, cohort_start_date, cohort_end_date columns (cohortColumns(\"cohort\")). record NA value required columns. record cohort_start_date cohort_end_date. overlap records. person can cohort several times (several records subject_id). can’t enter (cohort_start_date) cohort leaving (cohort_end_date). individual can’t simultaneously cohort. rule applied cohort_definition_id level, records different cohort_definition_id can overlap. time cohort_start_date cohort_end_date (included) individual must observation.","code":""},{"path":"https://darwin-eu-dev.github.io/omopgenerics/articles/cohorts.html","id":"combining-generated-cohort-sets","dir":"Articles","previous_headings":"","what":"Combining generated cohort sets","title":"Cohort tables","text":"can bind two cohort tables using method bind(). can combine several cohort tables using method. constrain cohort names must unique across different cohort tables. provide name new cohort table.","code":"asthma <- tibble(   cohort_definition_id = 1, subject_id = 1,   cohort_start_date = as.Date(\"2020-01-01\"),   cohort_end_date = as.Date(\"2020-01-10\") ) cdm <- insertTable(cdm, name = \"asthma\", table = asthma) cdm$asthma <- newCohortTable(cdm$asthma,                               cohortSetRef = tibble(cohort_definition_id = 1,                                                    cohort_name = \"asthma\")) #> Warning: ! 1 casted column in asthma (cohort_set) as do not match expected column type: #> • `cohort_definition_id` from numeric to integer #> Warning: ! 2 column in asthma do not match expected column type: #> • `cohort_definition_id` is numeric but expected integer #> • `subject_id` is numeric but expected integer  copd <- tibble(   cohort_definition_id = 1, subject_id = 2,   cohort_start_date = as.Date(\"2020-01-01\"),   cohort_end_date = as.Date(\"2020-01-10\") ) cdm <-  insertTable(cdm, name = \"copd\", table = copd) cdm$copd <- newCohortTable(cdm$copd,                             cohortSetRef = tibble(cohort_definition_id = 1,                                                    cohort_name = \"copd\")) #> Warning: ! 1 casted column in copd (cohort_set) as do not match expected column type: #> • `cohort_definition_id` from numeric to integer #> Warning: ! 2 column in copd do not match expected column type: #> • `cohort_definition_id` is numeric but expected integer #> • `subject_id` is numeric but expected integer  cdm <- bind(cdm$asthma,              cdm$copd,             name = \"exposures\") #> Warning: ! 1 column in exposures do not match expected column type: #> • `subject_id` is numeric but expected integer cdm$exposures #> # A tibble: 2 × 4 #>   cohort_definition_id subject_id cohort_start_date cohort_end_date #> *                <int>      <dbl> <date>            <date>          #> 1                    1          1 2020-01-01        2020-01-10      #> 2                    2          2 2020-01-01        2020-01-10  settings(cdm$exposures) #> # A tibble: 2 × 2 #>   cohort_definition_id cohort_name #>                  <int> <chr>       #> 1                    1 asthma      #> 2                    2 copd attrition(cdm$exposures) #> # A tibble: 2 × 7 #>   cohort_definition_id number_records number_subjects reason_id reason           #>                  <int>          <int>           <int>     <int> <chr>            #> 1                    1              1               1         1 Initial qualify… #> 2                    2              1               1         1 Initial qualify… #> # ℹ 2 more variables: excluded_records <int>, excluded_subjects <int> cohortCount(cdm$exposures) #> # A tibble: 2 × 3 #>   cohort_definition_id number_records number_subjects #>                  <int>          <int>           <int> #> 1                    1              1               1 #> 2                    2              1               1"},{"path":"https://darwin-eu-dev.github.io/omopgenerics/articles/cohorts.html","id":"export-metadata-about-a-cohort-table","dir":"Articles","previous_headings":"","what":"Export metadata about a cohort table","title":"Cohort tables","text":"can export metadata cohort_table using function: summary(): provide summarised_result object metadata cohort (cohort set, cohort counts cohort attrition).","code":"summary(cdm$exposures) |>   glimpse() #> Rows: 12 #> Columns: 13 #> $ result_id        <int> 1, 1, 2, 2, 3, 3, 3, 3, 4, 4, 4, 4 #> $ cdm_name         <chr> \"example_cdm\", \"example_cdm\", \"example_cdm\", \"example… #> $ group_name       <chr> \"cohort_name\", \"cohort_name\", \"cohort_name\", \"cohort_… #> $ group_level      <chr> \"asthma\", \"asthma\", \"copd\", \"copd\", \"asthma\", \"asthma… #> $ strata_name      <chr> \"overall\", \"overall\", \"overall\", \"overall\", \"reason\",… #> $ strata_level     <chr> \"overall\", \"overall\", \"overall\", \"overall\", \"Initial … #> $ variable_name    <chr> \"number_records\", \"number_subjects\", \"number_records\"… #> $ variable_level   <chr> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA #> $ estimate_name    <chr> \"count\", \"count\", \"count\", \"count\", \"count\", \"count\",… #> $ estimate_type    <chr> \"integer\", \"integer\", \"integer\", \"integer\", \"integer\"… #> $ estimate_value   <chr> \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"0\", \"0\", \"1\", \"1\", \"0\"… #> $ additional_name  <chr> \"overall\", \"overall\", \"overall\", \"overall\", \"reason_i… #> $ additional_level <chr> \"overall\", \"overall\", \"overall\", \"overall\", \"1\", \"1\",…"},{"path":"https://darwin-eu-dev.github.io/omopgenerics/articles/reexport.html","id":"introduction","dir":"Articles","previous_headings":"","what":"Introduction","title":"Re-exporting functions from omopgnerics","text":"omopgenerics package meant invisible user developer focused package. means typical user omopverse packages never need import directly . means functions needed used user need reexported packages.","code":""},{"path":"https://darwin-eu-dev.github.io/omopgenerics/articles/reexport.html","id":"methods","dir":"Articles","previous_headings":"","what":"Methods","title":"Re-exporting functions from omopgnerics","text":"package defined implementation desired method (participants, attrition, settings, …), function reexported .","code":""},{"path":"https://darwin-eu-dev.github.io/omopgenerics/articles/reexport.html","id":"cdm-reference","dir":"Articles","previous_headings":"","what":"CDM reference","title":"Re-exporting functions from omopgnerics","text":"package function create cdm_reference object, package re-export several functions. access cdm_reference attributes: cdmSource() cdmVersion() cdmName() access cdm_table attributes: tableSource() tableName() cdmReference() insert drop tables using cdm object: insertTable() dropTable() Helpers create appropriate cdm tables: omopColumns() omopTables() cohortColumns() cohortTables() achillesColumns() achillesTables()","code":""},{"path":"https://darwin-eu-dev.github.io/omopgenerics/articles/reexport.html","id":"cohorts","dir":"Articles","previous_headings":"","what":"Cohorts","title":"Re-exporting functions from omopgnerics","text":"package function create cohort_table object, package re-export following functions: settings() attrition() cohortCount() cohortCodelist() bind()","code":""},{"path":"https://darwin-eu-dev.github.io/omopgenerics/articles/reexport.html","id":"summarised-result","dir":"Articles","previous_headings":"","what":"Summarised result","title":"Re-exporting functions from omopgnerics","text":"package function create summarised_result object, package re-export following functions: suppress() bind() settings() exportSummarisedResult()","code":""},{"path":"https://darwin-eu-dev.github.io/omopgenerics/articles/summarised_result.html","id":"introduction","dir":"Articles","previous_headings":"","what":"Introduction","title":"A summarised result","text":"summarised result table contains aggregated summary statistics (, result set contains patient-level data). Let’s look example result format. just one esitmate can also associate settings results. typically used explain result created.","code":"library(omopgenerics) library(dplyr)  x <- dplyr::tibble(     \"result_id\" = as.integer(1),     \"cdm_name\" = \"my_cdm\",     \"group_name\" = \"sex\",     \"group_level\" = \"male\",     \"strata_name\" = \"sex\",     \"strata_level\" = \"male\",     \"variable_name\" = \"Age group\",     \"variable_level\" = \"10 to 50\",     \"estimate_name\" = \"count\",     \"estimate_type\" = \"numeric\",     \"estimate_value\" = \"5\",     \"additional_name\" = \"overall\",     \"additional_level\" = \"overall\"   )  result <- newSummarisedResult(x) result |>    dplyr::glimpse() #> Rows: 1 #> Columns: 13 #> $ result_id        <int> 1 #> $ cdm_name         <chr> \"my_cdm\" #> $ group_name       <chr> \"sex\" #> $ group_level      <chr> \"male\" #> $ strata_name      <chr> \"sex\" #> $ strata_level     <chr> \"male\" #> $ variable_name    <chr> \"Age group\" #> $ variable_level   <chr> \"10 to 50\" #> $ estimate_name    <chr> \"count\" #> $ estimate_type    <chr> \"numeric\" #> $ estimate_value   <chr> \"5\" #> $ additional_name  <chr> \"overall\" #> $ additional_level <chr> \"overall\" result <- newSummarisedResult(x,                      settings = dplyr::tibble(result_id = 1,                                              package = \"PatientProfiles\",                                              study = \"my_characterisation_study\"))  result |> glimpse() #> Rows: 1 #> Columns: 13 #> $ result_id        <int> 1 #> $ cdm_name         <chr> \"my_cdm\" #> $ group_name       <chr> \"sex\" #> $ group_level      <chr> \"male\" #> $ strata_name      <chr> \"sex\" #> $ strata_level     <chr> \"male\" #> $ variable_name    <chr> \"Age group\" #> $ variable_level   <chr> \"10 to 50\" #> $ estimate_name    <chr> \"count\" #> $ estimate_type    <chr> \"numeric\" #> $ estimate_value   <chr> \"5\" #> $ additional_name  <chr> \"overall\" #> $ additional_level <chr> \"overall\" settings(result) #> # A tibble: 1 × 6 #>   result_id package         study       result_type package_name package_version #>       <int> <chr>           <chr>       <chr>       <chr>        <chr>           #> 1         1 PatientProfiles my_charact… \"\"          \"\"           \"\""},{"path":"https://darwin-eu-dev.github.io/omopgenerics/articles/summarised_result.html","id":"combining-summarised-results","dir":"Articles","previous_headings":"","what":"Combining summarised results","title":"A summarised result","text":"Now results can combine using bind. two sets results contain result ID, results combined automatically updated.","code":"result_1 <- dplyr::tibble(     \"result_id\" = as.integer(1),     \"cdm_name\" = \"my_cdm\",     \"group_name\" = \"sex\",     \"group_level\" = \"male\",     \"strata_name\" = \"sex\",     \"strata_level\" = \"male\",     \"variable_name\" = \"Age group\",     \"variable_level\" = \"10 to 50\",     \"estimate_name\" = \"count\",     \"estimate_type\" = \"numeric\",     \"estimate_value\" = \"5\",     \"additional_name\" = \"overall\",     \"additional_level\" = \"overall\"   ) result_1_settings <- dplyr::tibble(result_id = 1,                                    package = \"PatientProfiles\",                                    study = \"my_characterisation_study\",                                    analyis = \"stratified by age_group\") result_1 <- newSummarisedResult(result_1, settings = result_1_settings)   result_2 <- dplyr::tibble(     \"result_id\" = as.integer(1),     \"cdm_name\" = \"my_cdm\",     \"group_name\" = \"overall\",     \"group_level\" = \"overall\",     \"strata_name\" = \"overall\",     \"strata_level\" = \"overall\",     \"variable_name\" = \"overall\",     \"variable_level\" = \"overall\",     \"estimate_name\" = \"count\",     \"estimate_type\" = \"numeric\",     \"estimate_value\" = \"55\",     \"additional_name\" = \"overall\",     \"additional_level\" = \"overall\"   ) result_2_settings <- dplyr::tibble(result_id = 1,                                    package = \"PatientProfiles\",                                    study = \"my_characterisation_study\",                                    analyis = \"overall analysis\") result_2 <- newSummarisedResult(result_2, settings = result_2_settings) result <- bind(list(result_1, result_2)) result |>    dplyr::glimpse() #> Rows: 2 #> Columns: 13 #> $ result_id        <int> 1, 2 #> $ cdm_name         <chr> \"my_cdm\", \"my_cdm\" #> $ group_name       <chr> \"sex\", \"overall\" #> $ group_level      <chr> \"male\", \"overall\" #> $ strata_name      <chr> \"sex\", \"overall\" #> $ strata_level     <chr> \"male\", \"overall\" #> $ variable_name    <chr> \"Age group\", \"overall\" #> $ variable_level   <chr> \"10 to 50\", \"overall\" #> $ estimate_name    <chr> \"count\", \"count\" #> $ estimate_type    <chr> \"numeric\", \"numeric\" #> $ estimate_value   <chr> \"5\", \"55\" #> $ additional_name  <chr> \"overall\", \"overall\" #> $ additional_level <chr> \"overall\", \"overall\" settings(result) #> # A tibble: 2 × 7 #>   result_id package       study analyis result_type package_name package_version #>       <int> <chr>         <chr> <chr>   <chr>       <chr>        <chr>           #> 1         1 PatientProfi… my_c… strati… \"\"          \"\"           \"\"              #> 2         2 PatientProfi… my_c… overal… \"\"          \"\"           \"\""},{"path":"https://darwin-eu-dev.github.io/omopgenerics/articles/summarised_result.html","id":"minimum-cell-count-suppression","dir":"Articles","previous_headings":"","what":"Minimum cell count suppression","title":"A summarised result","text":"summarised result, can suppress results based minimum cell count.","code":"suppress(result, minCellCount = 7) |>    glimpse() #> Rows: 2 #> Columns: 13 #> $ result_id        <int> 1, 2 #> $ cdm_name         <chr> \"my_cdm\", \"my_cdm\" #> $ group_name       <chr> \"sex\", \"overall\" #> $ group_level      <chr> \"male\", \"overall\" #> $ strata_name      <chr> \"sex\", \"overall\" #> $ strata_level     <chr> \"male\", \"overall\" #> $ variable_name    <chr> \"Age group\", \"overall\" #> $ variable_level   <chr> \"10 to 50\", \"overall\" #> $ estimate_name    <chr> \"count\", \"count\" #> $ estimate_type    <chr> \"numeric\", \"numeric\" #> $ estimate_value   <chr> NA, \"55\" #> $ additional_name  <chr> \"overall\", \"overall\" #> $ additional_level <chr> \"overall\", \"overall\""},{"path":"https://darwin-eu-dev.github.io/omopgenerics/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Martí Català. Author, maintainer. Edward Burn. Author. Mike Du. Contributor. Yuchen Guo. Contributor. Adam Black. Contributor. Marta Alcalde-Herraiz. Contributor.","code":""},{"path":"https://darwin-eu-dev.github.io/omopgenerics/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Català M, Burn E (2024). omopgenerics: Methods Classes OMOP Common Data Model. R package version 0.3.0.900, https://darwin-eu-dev.github.io/omopgenerics/.","code":"@Manual{,   title = {omopgenerics: Methods and Classes for the OMOP Common Data Model},   author = {Martí Català and Edward Burn},   year = {2024},   note = {R package version 0.3.0.900},   url = {https://darwin-eu-dev.github.io/omopgenerics/}, }"},{"path":[]},{"path":"https://darwin-eu-dev.github.io/omopgenerics/index.html","id":"package-overview","dir":"","previous_headings":"","what":"Package overview","title":"Methods and Classes for the OMOP Common Data Model","text":"omopgenerics package provides definitions core classes methods used analytic pipelines query OMOP common data model. find package useful supporting research study, please consider citing package.","code":"#> To cite package 'omopgenerics' in publications use: #>  #>   Català M, Burn E (2024). _omopgenerics: Methods and Classes for the #>   OMOP Common Data Model_. R package version 0.3.0, #>   <https://CRAN.R-project.org/package=omopgenerics>. #>  #> A BibTeX entry for LaTeX users is #>  #>   @Manual{, #>     title = {omopgenerics: Methods and Classes for the OMOP Common Data Model}, #>     author = {Martí Català and Edward Burn}, #>     year = {2024}, #>     note = {R package version 0.3.0}, #>     url = {https://CRAN.R-project.org/package=omopgenerics}, #>   }"},{"path":"https://darwin-eu-dev.github.io/omopgenerics/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Methods and Classes for the OMOP Common Data Model","text":"can install development version OMOPGenerics GitHub : load using library command:","code":"install.packages(\"remotes\") devtools::install_github(\"darwin-eu-dev/omopgenerics\") library(omopgenerics) library(dplyr)"},{"path":[]},{"path":"https://darwin-eu-dev.github.io/omopgenerics/index.html","id":"cdm-reference","dir":"","previous_headings":"Core classes and methods","what":"CDM Reference","title":"Methods and Classes for the OMOP Common Data Model","text":"cdm reference single R object represents OMOP CDM data. tables cdm reference may database, cdm reference may also contain OMOP CDM tables dataframes/tibbles arrow. latter case cdm reference typically subset original cdm reference derived part particular analysis. omopgenerics contains class definition cdm reference dataframe implementation. creating cdm reference using database, see CDMConnector package (https://darwin-eu.github.io/CDMConnector/). cdm object can contain four type tables: Standard tables: one tables required columns. example, person table required columns: Cohort tables can see cohort-related tables required columns. addition, cohorts defined terms generatedCohortSet class. details class definition see corresponding vignette. Achilles tables Achilles R package generates descriptive statistics data contained OMOP CDM. , can see tables created required columns. tables, tables can format. table part cdm object fulfill 4 conditions: must share common source. name tables must lowercase. name column names table must lowercase. person observation_period must present.","code":"omopTables() #>  [1] \"person\"                \"observation_period\"    \"visit_occurrence\"      #>  [4] \"visit_detail\"          \"condition_occurrence\"  \"drug_exposure\"         #>  [7] \"procedure_occurrence\"  \"device_exposure\"       \"measurement\"           #> [10] \"observation\"           \"death\"                 \"note\"                  #> [13] \"note_nlp\"              \"specimen\"              \"fact_relationship\"     #> [16] \"location\"              \"care_site\"             \"provider\"              #> [19] \"payer_plan_period\"     \"cost\"                  \"drug_era\"              #> [22] \"dose_era\"              \"condition_era\"         \"metadata\"              #> [25] \"cdm_source\"            \"concept\"               \"vocabulary\"            #> [28] \"domain\"                \"concept_class\"         \"concept_relationship\"  #> [31] \"relationship\"          \"concept_synonym\"       \"concept_ancestor\"      #> [34] \"source_to_concept_map\" \"drug_strength\"         \"cohort_definition\"     #> [37] \"attribute_definition\"  \"concept_recommended\" omopColumns(table = \"person\") #> [1] \"person_id\"            \"gender_concept_id\"    \"year_of_birth\"        #> [4] \"race_concept_id\"      \"ethnicity_concept_id\" cohortTables() #> [1] \"cohort\"           \"cohort_set\"       \"cohort_attrition\" \"cohort_codelist\" cohortColumns(table = \"cohort\") #> [1] \"cohort_definition_id\" \"subject_id\"           \"cohort_start_date\"    #> [4] \"cohort_end_date\" achillesTables() #> [1] \"achilles_analysis\"     \"achilles_results\"      \"achilles_results_dist\" achillesColumns(table = \"achilles_results\") #> [1] \"analysis_id\" \"stratum_1\"   \"stratum_2\"   \"stratum_3\"   \"stratum_4\"   #> [6] \"stratum_5\"   \"count_value\""},{"path":"https://darwin-eu-dev.github.io/omopgenerics/index.html","id":"concept-set","dir":"","previous_headings":"Core classes and methods","what":"Concept set","title":"Methods and Classes for the OMOP Common Data Model","text":"concept set can represented either codelist concept set expression. codelist named list, item list containing specific concept IDs. Meanwhile, concept set expression provides high-level definition concepts , applied specific OMOP CDM vocabulary version (making use concept hierarchies relationships), result codelist.","code":"condition_codes <- list(\"diabetes\" = c(201820, 4087682, 3655269),                         \"asthma\" = 317009) condition_codes <- newCodelist(condition_codes) #> Warning: ! `codelist` contains numeric values, they are casted to integers.  condition_codes #>  #> ── 2 codelists ───────────────────────────────────────────────────────────────── #>  #> - asthma (1 codes) #> - diabetes (3 codes) condition_cs <- list(   \"diabetes\" = dplyr::tibble(     \"concept_id\" = c(201820, 4087682),     \"excluded\" = c(FALSE, FALSE),     \"descendants\" = c(TRUE, FALSE),     \"mapped\" = c(FALSE, FALSE)   ),   \"asthma\" = dplyr::tibble(     \"concept_id\" = 317009,     \"excluded\" = FALSE,     \"descendants\" = FALSE,     \"mapped\" = FALSE   ) ) condition_cs <- newConceptSetExpression(condition_cs)  condition_cs #>  #> ── 2 conceptSetExpressions ───────────────────────────────────────────────────── #>  #> - asthma (1 concept criteria) #> - diabetes (2 concept criteria)"},{"path":"https://darwin-eu-dev.github.io/omopgenerics/index.html","id":"a-cohort-table","dir":"","previous_headings":"Core classes and methods","what":"A cohort table","title":"Methods and Classes for the OMOP Common Data Model","text":"cohort set persons satisfy one inclusion criteria duration time , defined, table cdm reference cohort table class. Cohort tables associated attributes settings attrition.","code":"person <- tibble(   person_id = 1, gender_concept_id = 0, year_of_birth = 1990,   race_concept_id = 0, ethnicity_concept_id = 0 ) observation_period <- dplyr::tibble(   observation_period_id = 1, person_id = 1,   observation_period_start_date = as.Date(\"2000-01-01\"),   observation_period_end_date = as.Date(\"2023-12-31\"),   period_type_concept_id = 0 ) diabetes <- tibble(   cohort_definition_id = 1, subject_id = 1,   cohort_start_date = as.Date(\"2020-01-01\"),   cohort_end_date = as.Date(\"2020-01-10\") )  cdm <- cdmFromTables(   tables = list(     \"person\" = person,     \"observation_period\" = observation_period,     \"diabetes\" = diabetes   ),   cdmName = \"example_cdm\" ) #> Warning: ! 5 column in person do not match expected column type: #> • `person_id` is numeric but expected integer #> • `gender_concept_id` is numeric but expected integer #> • `year_of_birth` is numeric but expected integer #> • `race_concept_id` is numeric but expected integer #> • `ethnicity_concept_id` is numeric but expected integer #> Warning: ! 3 column in observation_period do not match expected column type: #> • `observation_period_id` is numeric but expected integer #> • `person_id` is numeric but expected integer #> • `period_type_concept_id` is numeric but expected integer cdm$diabetes <- newCohortTable(cdm$diabetes) #> Warning: ! 2 column in diabetes do not match expected column type: #> • `cohort_definition_id` is numeric but expected integer #> • `subject_id` is numeric but expected integer  cdm$diabetes #> # A tibble: 1 × 4 #>   cohort_definition_id subject_id cohort_start_date cohort_end_date #>                  <dbl>      <dbl> <date>            <date>          #> 1                    1          1 2020-01-01        2020-01-10 settings(cdm$diabetes) #> # A tibble: 1 × 2 #>   cohort_definition_id cohort_name #>                  <int> <chr>       #> 1                    1 cohort_1 attrition(cdm$diabetes) #> # A tibble: 1 × 7 #>   cohort_definition_id number_records number_subjects reason_id reason           #>                  <int>          <int>           <int>     <int> <chr>            #> 1                    1              1               1         1 Initial qualify… #> # ℹ 2 more variables: excluded_records <int>, excluded_subjects <int> cohortCount(cdm$diabetes) #> # A tibble: 1 × 3 #>   cohort_definition_id number_records number_subjects #>                  <int>          <int>           <int> #> 1                    1              1               1"},{"path":"https://darwin-eu-dev.github.io/omopgenerics/index.html","id":"summarised-result","dir":"","previous_headings":"Core classes and methods","what":"Summarised result","title":"Methods and Classes for the OMOP Common Data Model","text":"summarised result provides standard format results analysis performed data mapped OMOP CDM. example format used get summary cdm whole also summarise cohort","code":"summary(cdm) |>    dplyr::glimpse() #> Rows: 13 #> Columns: 13 #> $ result_id        <int> 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1 #> $ cdm_name         <chr> \"example_cdm\", \"example_cdm\", \"example_cdm\", \"example… #> $ group_name       <chr> \"overall\", \"overall\", \"overall\", \"overall\", \"overall\"… #> $ group_level      <chr> \"overall\", \"overall\", \"overall\", \"overall\", \"overall\"… #> $ strata_name      <chr> \"overall\", \"overall\", \"overall\", \"overall\", \"overall\"… #> $ strata_level     <chr> \"overall\", \"overall\", \"overall\", \"overall\", \"overall\"… #> $ variable_name    <chr> \"snapshot_date\", \"person_count\", \"observation_period_… #> $ variable_level   <chr> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA #> $ estimate_name    <chr> \"value\", \"count\", \"count\", \"source_name\", \"version\", … #> $ estimate_type    <chr> \"date\", \"integer\", \"integer\", \"character\", \"character… #> $ estimate_value   <chr> \"2024-09-11\", \"1\", \"1\", \"\", NA, \"5.3\", \"\", \"\", \"\", \"\"… #> $ additional_name  <chr> \"overall\", \"overall\", \"overall\", \"overall\", \"overall\"… #> $ additional_level <chr> \"overall\", \"overall\", \"overall\", \"overall\", \"overall\"… summary(cdm$diabetes) |>    dplyr::glimpse() #> Rows: 6 #> Columns: 13 #> $ result_id        <int> 1, 1, 2, 2, 2, 2 #> $ cdm_name         <chr> \"example_cdm\", \"example_cdm\", \"example_cdm\", \"example… #> $ group_name       <chr> \"cohort_name\", \"cohort_name\", \"cohort_name\", \"cohort_… #> $ group_level      <chr> \"cohort_1\", \"cohort_1\", \"cohort_1\", \"cohort_1\", \"coho… #> $ strata_name      <chr> \"overall\", \"overall\", \"reason\", \"reason\", \"reason\", \"… #> $ strata_level     <chr> \"overall\", \"overall\", \"Initial qualifying events\", \"I… #> $ variable_name    <chr> \"number_records\", \"number_subjects\", \"number_records\"… #> $ variable_level   <chr> NA, NA, NA, NA, NA, NA #> $ estimate_name    <chr> \"count\", \"count\", \"count\", \"count\", \"count\", \"count\" #> $ estimate_type    <chr> \"integer\", \"integer\", \"integer\", \"integer\", \"integer\"… #> $ estimate_value   <chr> \"1\", \"1\", \"1\", \"1\", \"0\", \"0\" #> $ additional_name  <chr> \"overall\", \"overall\", \"reason_id\", \"reason_id\", \"reas… #> $ additional_level <chr> \"overall\", \"overall\", \"1\", \"1\", \"1\", \"1\""},{"path":"https://darwin-eu-dev.github.io/omopgenerics/reference/achillesColumns.html","id":null,"dir":"Reference","previous_headings":"","what":"Required columns for each of the achilles result tables — achillesColumns","title":"Required columns for each of the achilles result tables — achillesColumns","text":"Required columns achilles result tables","code":""},{"path":"https://darwin-eu-dev.github.io/omopgenerics/reference/achillesColumns.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Required columns for each of the achilles result tables — achillesColumns","text":"","code":"achillesColumns(table, onlyRequired = TRUE, version = \"5.3\")"},{"path":"https://darwin-eu-dev.github.io/omopgenerics/reference/achillesColumns.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Required columns for each of the achilles result tables — achillesColumns","text":"table Table see required columns. One \"achilles_analysis\", \"achilles_results\", \"achilles_results_dist\". onlyRequired Whether include required fields. version Version OMOP Common Data Model.","code":""},{"path":"https://darwin-eu-dev.github.io/omopgenerics/reference/achillesColumns.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Required columns for each of the achilles result tables — achillesColumns","text":"Character vector column names","code":""},{"path":"https://darwin-eu-dev.github.io/omopgenerics/reference/achillesColumns.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Required columns for each of the achilles result tables — achillesColumns","text":"","code":"# \\donttest{ library(omopgenerics) achillesColumns(\"achilles_analysis\") #> [1] \"analysis_id\"    \"analysis_name\"  \"stratum_1_name\" \"stratum_2_name\" #> [5] \"stratum_3_name\" \"stratum_4_name\" \"stratum_5_name\" \"is_default\"     #> [9] \"category\"       achillesColumns(\"achilles_results\") #> [1] \"analysis_id\" \"stratum_1\"   \"stratum_2\"   \"stratum_3\"   \"stratum_4\"   #> [6] \"stratum_5\"   \"count_value\" achillesColumns(\"achilles_results_dist\") #>  [1] \"analysis_id\"  \"stratum_1\"    \"stratum_2\"    \"stratum_3\"    \"stratum_4\"    #>  [6] \"stratum_5\"    \"count_value\"  \"min_value\"    \"max_value\"    \"avg_value\"    #> [11] \"stdev_value\"  \"median_value\" \"p10_value\"    \"p25_value\"    \"p75_value\"    #> [16] \"p90_value\"    # }"},{"path":"https://darwin-eu-dev.github.io/omopgenerics/reference/achillesTables.html","id":null,"dir":"Reference","previous_headings":"","what":"Names of the tables that contain the results of achilles analyses — achillesTables","title":"Names of the tables that contain the results of achilles analyses — achillesTables","text":"Names tables contain results achilles analyses","code":""},{"path":"https://darwin-eu-dev.github.io/omopgenerics/reference/achillesTables.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Names of the tables that contain the results of achilles analyses — achillesTables","text":"","code":"achillesTables(version = \"5.3\")"},{"path":"https://darwin-eu-dev.github.io/omopgenerics/reference/achillesTables.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Names of the tables that contain the results of achilles analyses — achillesTables","text":"version Version OMOP Common Data Model.","code":""},{"path":"https://darwin-eu-dev.github.io/omopgenerics/reference/achillesTables.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Names of the tables that contain the results of achilles analyses — achillesTables","text":"Names tables contain results achilles analyses","code":""},{"path":"https://darwin-eu-dev.github.io/omopgenerics/reference/achillesTables.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Names of the tables that contain the results of achilles analyses — achillesTables","text":"","code":"# \\donttest{ library(omopgenerics) achillesTables() #> [1] \"achilles_analysis\"     \"achilles_results\"      \"achilles_results_dist\" # }"},{"path":"https://darwin-eu-dev.github.io/omopgenerics/reference/assertCharacter.html","id":null,"dir":"Reference","previous_headings":"","what":"Assert that an object is a character and fulfill certain conditions. — assertCharacter","title":"Assert that an object is a character and fulfill certain conditions. — assertCharacter","text":"Assert object character fulfill certain conditions.","code":""},{"path":"https://darwin-eu-dev.github.io/omopgenerics/reference/assertCharacter.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Assert that an object is a character and fulfill certain conditions. — assertCharacter","text":"","code":"assertCharacter(   x,   length = NULL,   na = FALSE,   null = FALSE,   unique = FALSE,   named = FALSE,   minNumCharacter = 0,   call = parent.frame(),   msg = NULL )"},{"path":"https://darwin-eu-dev.github.io/omopgenerics/reference/assertCharacter.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Assert that an object is a character and fulfill certain conditions. — assertCharacter","text":"x Variable check. length Required length. NULL length checked. na Whether can contain NA values. null Whether can NULL. unique Whether contain unique elements. named Whether named. minNumCharacter Minimum number characters elements must . call Call argument passed cli error message. msg Custom error message.","code":""},{"path":"https://darwin-eu-dev.github.io/omopgenerics/reference/assertChoice.html","id":null,"dir":"Reference","previous_headings":"","what":"Assert that an object is within a certain oprtions. — assertChoice","title":"Assert that an object is within a certain oprtions. — assertChoice","text":"Assert object within certain oprtions.","code":""},{"path":"https://darwin-eu-dev.github.io/omopgenerics/reference/assertChoice.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Assert that an object is within a certain oprtions. — assertChoice","text":"","code":"assertChoice(   x,   choices,   length = NULL,   na = FALSE,   null = FALSE,   unique = FALSE,   named = FALSE,   call = parent.frame(),   msg = NULL )"},{"path":"https://darwin-eu-dev.github.io/omopgenerics/reference/assertChoice.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Assert that an object is within a certain oprtions. — assertChoice","text":"x Variable check. choices Options x allowed . length Required length. NULL length checked. na Whether can contain NA values. null Whether can NULL. unique Whether contain unique elements. named Whether named. call Call argument passed cli error message. msg Custom error message.","code":""},{"path":"https://darwin-eu-dev.github.io/omopgenerics/reference/assertClass.html","id":null,"dir":"Reference","previous_headings":"","what":"Assert that an object has a certain class. — assertClass","title":"Assert that an object has a certain class. — assertClass","text":"Assert object certain class.","code":""},{"path":"https://darwin-eu-dev.github.io/omopgenerics/reference/assertClass.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Assert that an object has a certain class. — assertClass","text":"","code":"assertClass(   x,   class,   length = NULL,   null = FALSE,   all = FALSE,   extra = TRUE,   call = parent.frame(),   msg = NULL )"},{"path":"https://darwin-eu-dev.github.io/omopgenerics/reference/assertClass.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Assert that an object has a certain class. — assertClass","text":"x check. class Expected class classes. length Required length. NULL length checked. null Whether can NULL. Whether classes least one . extra Whether object can extra classes. call Call argument passed cli. msg Custom error message.","code":""},{"path":"https://darwin-eu-dev.github.io/omopgenerics/reference/assertDate.html","id":null,"dir":"Reference","previous_headings":"","what":"Assert Date — assertDate","title":"Assert Date — assertDate","text":"Assert Date","code":""},{"path":"https://darwin-eu-dev.github.io/omopgenerics/reference/assertDate.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Assert Date — assertDate","text":"","code":"assertDate(   x,   length = NULL,   na = FALSE,   null = FALSE,   unique = FALSE,   named = FALSE,   call = parent.frame(),   msg = NULL )"},{"path":"https://darwin-eu-dev.github.io/omopgenerics/reference/assertDate.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Assert Date — assertDate","text":"x Expression check. length Required length. na Whether can contain NA values. null Whether can NULL. unique Whether contain unique elements. named Whether named. call Call argument passed cli error message. msg Custom error message.","code":""},{"path":"https://darwin-eu-dev.github.io/omopgenerics/reference/assertDate.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Assert Date — assertDate","text":"x","code":""},{"path":"https://darwin-eu-dev.github.io/omopgenerics/reference/assertList.html","id":null,"dir":"Reference","previous_headings":"","what":"Assert that an object is a list. — assertList","title":"Assert that an object is a list. — assertList","text":"Assert object list.","code":""},{"path":"https://darwin-eu-dev.github.io/omopgenerics/reference/assertList.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Assert that an object is a list. — assertList","text":"","code":"assertList(   x,   length = NULL,   na = FALSE,   null = FALSE,   unique = FALSE,   named = FALSE,   class = NULL,   call = parent.frame(),   msg = NULL )"},{"path":"https://darwin-eu-dev.github.io/omopgenerics/reference/assertList.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Assert that an object is a list. — assertList","text":"x Variable check. length Required length. NULL length checked. na Whether can contain NA values. null Whether can NULL. unique Whether contain unique elements. named Whether named. class Class elements must . call Call argument passed cli error message. msg Custom error message.","code":""},{"path":"https://darwin-eu-dev.github.io/omopgenerics/reference/assertLogical.html","id":null,"dir":"Reference","previous_headings":"","what":"Assert that an object is a logical. — assertLogical","title":"Assert that an object is a logical. — assertLogical","text":"Assert object logical.","code":""},{"path":"https://darwin-eu-dev.github.io/omopgenerics/reference/assertLogical.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Assert that an object is a logical. — assertLogical","text":"","code":"assertLogical(   x,   length = NULL,   na = FALSE,   null = FALSE,   named = FALSE,   call = parent.frame(),   msg = NULL )"},{"path":"https://darwin-eu-dev.github.io/omopgenerics/reference/assertLogical.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Assert that an object is a logical. — assertLogical","text":"x Variable check. length Required length. NULL length checked. na Whether can contain NA values. null Whether can NULL. named Whether named. call Call argument passed cli error message. msg Custom error message.","code":""},{"path":"https://darwin-eu-dev.github.io/omopgenerics/reference/assertNumeric.html","id":null,"dir":"Reference","previous_headings":"","what":"Assert that an object is a numeric. — assertNumeric","title":"Assert that an object is a numeric. — assertNumeric","text":"Assert object numeric.","code":""},{"path":"https://darwin-eu-dev.github.io/omopgenerics/reference/assertNumeric.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Assert that an object is a numeric. — assertNumeric","text":"","code":"assertNumeric(   x,   integerish = FALSE,   min = -Inf,   max = Inf,   length = NULL,   na = FALSE,   null = FALSE,   unique = FALSE,   named = FALSE,   call = parent.frame(),   msg = NULL )"},{"path":"https://darwin-eu-dev.github.io/omopgenerics/reference/assertNumeric.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Assert that an object is a numeric. — assertNumeric","text":"x Variable check. integerish Whether integer min Minimum value object can . max Maximum value object can . length Required length. NULL length checked. na Whether can contain NA values. null Whether can NULL. unique Whether contain unique elements. named Whether named. call Call argument passed cli error message. msg Custom error message.","code":""},{"path":"https://darwin-eu-dev.github.io/omopgenerics/reference/assertTable.html","id":null,"dir":"Reference","previous_headings":"","what":"Assert that an object is a table. — assertTable","title":"Assert that an object is a table. — assertTable","text":"Assert object table.","code":""},{"path":"https://darwin-eu-dev.github.io/omopgenerics/reference/assertTable.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Assert that an object is a table. — assertTable","text":"","code":"assertTable(   x,   class = \"data.frame\",   numberColumns = NULL,   numberRows = NULL,   columns = character(),   allowExtraColumns = TRUE,   null = FALSE,   unique = FALSE,   call = parent.frame(),   msg = NULL )"},{"path":"https://darwin-eu-dev.github.io/omopgenerics/reference/assertTable.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Assert that an object is a table. — assertTable","text":"x Variable check. class class table must : \"tbl\", \"data.fram\", \"tbl_sql\", ... numberColumns Number columns contain. numberRows Number rows contain. columns Name columns required. allowExtraColumns Whether extra columns allowed. null Whether can NULL. unique Whether contain unique rows. call Call argument passed cli error message. msg Custom error message.","code":""},{"path":"https://darwin-eu-dev.github.io/omopgenerics/reference/assertTrue.html","id":null,"dir":"Reference","previous_headings":"","what":"Assert that an expression is TRUE. — assertTrue","title":"Assert that an expression is TRUE. — assertTrue","text":"Assert expression TRUE.","code":""},{"path":"https://darwin-eu-dev.github.io/omopgenerics/reference/assertTrue.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Assert that an expression is TRUE. — assertTrue","text":"","code":"assertTrue(x, null = FALSE, call = parent.frame(), msg = NULL)"},{"path":"https://darwin-eu-dev.github.io/omopgenerics/reference/assertTrue.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Assert that an expression is TRUE. — assertTrue","text":"x Expression check. null Whether can NULL. call Call argument passed cli error message. msg Custom error message.","code":""},{"path":"https://darwin-eu-dev.github.io/omopgenerics/reference/attrition.cohort_table.html","id":null,"dir":"Reference","previous_headings":"","what":"Get cohort attrition from a cohort_table object. — attrition.cohort_table","title":"Get cohort attrition from a cohort_table object. — attrition.cohort_table","text":"Get cohort attrition cohort_table object.","code":""},{"path":"https://darwin-eu-dev.github.io/omopgenerics/reference/attrition.cohort_table.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get cohort attrition from a cohort_table object. — attrition.cohort_table","text":"","code":"# S3 method for class 'cohort_table' attrition(x)"},{"path":"https://darwin-eu-dev.github.io/omopgenerics/reference/attrition.cohort_table.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get cohort attrition from a cohort_table object. — attrition.cohort_table","text":"x cohort_table","code":""},{"path":"https://darwin-eu-dev.github.io/omopgenerics/reference/attrition.cohort_table.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get cohort attrition from a cohort_table object. — attrition.cohort_table","text":"table attrition.","code":""},{"path":"https://darwin-eu-dev.github.io/omopgenerics/reference/attrition.cohort_table.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get cohort attrition from a cohort_table object. — attrition.cohort_table","text":"","code":"# \\donttest{ library(omopgenerics) library(dplyr, warn.conflicts = FALSE)  person <- tibble(   person_id = 1, gender_concept_id = 0, year_of_birth = 1990,   race_concept_id = 0, ethnicity_concept_id = 0 ) observation_period <- tibble(   observation_period_id = 1, person_id = 1,   observation_period_start_date = as.Date(\"2000-01-01\"),   observation_period_end_date = as.Date(\"2023-12-31\"),   period_type_concept_id = 0 ) cohort <- tibble(   cohort_definition_id = c(1, 1, 1, 2),   subject_id = 1,   cohort_start_date = as.Date(c(\"2020-01-01\", \"2021-01-01\", \"2022-01-01\", \"2022-01-01\")),   cohort_end_date = as.Date(c(\"2020-01-01\", \"2021-01-01\", \"2022-01-01\", \"2022-01-01\")), ) cdm <- cdmFromTables(   tables = list(\"person\" = person, \"observation_period\" = observation_period),   cdmName = \"my_example_cdm\",   cohortTables = list(\"cohort1\" = cohort) ) #> Warning: ! 5 column in person do not match expected column type: #> • `person_id` is numeric but expected integer #> • `gender_concept_id` is numeric but expected integer #> • `year_of_birth` is numeric but expected integer #> • `race_concept_id` is numeric but expected integer #> • `ethnicity_concept_id` is numeric but expected integer #> Warning: ! 3 column in observation_period do not match expected column type: #> • `observation_period_id` is numeric but expected integer #> • `person_id` is numeric but expected integer #> • `period_type_concept_id` is numeric but expected integer #> Warning: ! 2 column in cohort1 do not match expected column type: #> • `cohort_definition_id` is numeric but expected integer #> • `subject_id` is numeric but expected integer  attrition(cdm$cohort1) #> # A tibble: 2 × 7 #>   cohort_definition_id number_records number_subjects reason_id reason           #>                  <int>          <int>           <int>     <int> <chr>            #> 1                    1              3               1         1 Initial qualify… #> 2                    2              1               1         1 Initial qualify… #> # ℹ 2 more variables: excluded_records <int>, excluded_subjects <int> # }"},{"path":"https://darwin-eu-dev.github.io/omopgenerics/reference/attrition.html","id":null,"dir":"Reference","previous_headings":"","what":"Get attrition from an object. — attrition","title":"Get attrition from an object. — attrition","text":"Get attrition object.","code":""},{"path":"https://darwin-eu-dev.github.io/omopgenerics/reference/attrition.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get attrition from an object. — attrition","text":"","code":"attrition(x)"},{"path":"https://darwin-eu-dev.github.io/omopgenerics/reference/attrition.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get attrition from an object. — attrition","text":"x object get attrition summary.","code":""},{"path":"https://darwin-eu-dev.github.io/omopgenerics/reference/attrition.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get attrition from an object. — attrition","text":"table attrition.","code":""},{"path":"https://darwin-eu-dev.github.io/omopgenerics/reference/bind.cohort_table.html","id":null,"dir":"Reference","previous_headings":"","what":"Bind two or more cohort tables — bind.cohort_table","title":"Bind two or more cohort tables — bind.cohort_table","text":"Bind two cohort tables","code":""},{"path":"https://darwin-eu-dev.github.io/omopgenerics/reference/bind.cohort_table.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Bind two or more cohort tables — bind.cohort_table","text":"","code":"# S3 method for class 'cohort_table' bind(..., name)"},{"path":"https://darwin-eu-dev.github.io/omopgenerics/reference/bind.cohort_table.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Bind two or more cohort tables — bind.cohort_table","text":"... Generated cohort set objects bind. least two must provided. name Name new generated cohort set.","code":""},{"path":"https://darwin-eu-dev.github.io/omopgenerics/reference/bind.cohort_table.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Bind two or more cohort tables — bind.cohort_table","text":"cdm object new generated cohort set containing cohorts passed.","code":""},{"path":"https://darwin-eu-dev.github.io/omopgenerics/reference/bind.cohort_table.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Bind two or more cohort tables — bind.cohort_table","text":"","code":"library(omopgenerics) library(dplyr, warn.conflicts = FALSE)  cohort1 <- tibble(   cohort_definition_id = 1,   subject_id = 1:3,   cohort_start_date = as.Date(\"2010-01-01\"),   cohort_end_date = as.Date(\"2010-01-05\") ) cohort2 <- tibble(   cohort_definition_id = c(2, 2, 3, 3, 3),   subject_id = c(1, 2, 3, 1, 2),   cohort_start_date = as.Date(\"2010-01-01\"),   cohort_end_date = as.Date(\"2010-01-05\") ) cdm <- cdmFromTables(   tables = list(     \"person\" = tibble(       person_id = c(1, 2, 3), gender_concept_id = 0, year_of_birth = 1990,       race_concept_id = 0, ethnicity_concept_id = 0     ),     \"observation_period\" = tibble(       observation_period_id = 1:3, person_id = 1:3,       observation_period_start_date = as.Date(\"2000-01-01\"),       observation_period_end_date = as.Date(\"2023-12-31\"),       period_type_concept_id = 0     )   ),   cdmName = \"mock\",   cohortTables = list(\"cohort1\" = cohort1, \"cohort2\" = cohort2) ) #> Warning: ! 5 column in person do not match expected column type: #> • `person_id` is numeric but expected integer #> • `gender_concept_id` is numeric but expected integer #> • `year_of_birth` is numeric but expected integer #> • `race_concept_id` is numeric but expected integer #> • `ethnicity_concept_id` is numeric but expected integer #> Warning: ! 1 column in observation_period do not match expected column type: #> • `period_type_concept_id` is numeric but expected integer #> Warning: ! 1 column in cohort1 do not match expected column type: #> • `cohort_definition_id` is numeric but expected integer #> Warning: ! 2 column in cohort2 do not match expected column type: #> • `cohort_definition_id` is numeric but expected integer #> • `subject_id` is numeric but expected integer  cdm <- bind(cdm$cohort1, cdm$cohort2, name = \"cohort3\") #> Warning: ! 1 column in cohort3 do not match expected column type: #> • `subject_id` is numeric but expected integer settings(cdm$cohort3) #> # A tibble: 3 × 2 #>   cohort_definition_id cohort_name #>                  <int> <chr>       #> 1                    1 cohort_1    #> 2                    2 cohort_2    #> 3                    3 cohort_3    cdm$cohort3 #> # A tibble: 8 × 4 #>   cohort_definition_id subject_id cohort_start_date cohort_end_date #> *                <int>      <dbl> <date>            <date>          #> 1                    1          1 2010-01-01        2010-01-05      #> 2                    1          2 2010-01-01        2010-01-05      #> 3                    1          3 2010-01-01        2010-01-05      #> 4                    2          1 2010-01-01        2010-01-05      #> 5                    2          2 2010-01-01        2010-01-05      #> 6                    3          3 2010-01-01        2010-01-05      #> 7                    3          1 2010-01-01        2010-01-05      #> 8                    3          2 2010-01-01        2010-01-05"},{"path":"https://darwin-eu-dev.github.io/omopgenerics/reference/bind.html","id":null,"dir":"Reference","previous_headings":"","what":"Bind two or more objects of the same class. — bind","title":"Bind two or more objects of the same class. — bind","text":"Bind two objects class.","code":""},{"path":"https://darwin-eu-dev.github.io/omopgenerics/reference/bind.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Bind two or more objects of the same class. — bind","text":"","code":"bind(...)"},{"path":"https://darwin-eu-dev.github.io/omopgenerics/reference/bind.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Bind two or more objects of the same class. — bind","text":"... Objects bind.","code":""},{"path":"https://darwin-eu-dev.github.io/omopgenerics/reference/bind.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Bind two or more objects of the same class. — bind","text":"New object.","code":""},{"path":"https://darwin-eu-dev.github.io/omopgenerics/reference/bind.summarised_result.html","id":null,"dir":"Reference","previous_headings":"","what":"Bind two or summarised_result objects — bind.summarised_result","title":"Bind two or summarised_result objects — bind.summarised_result","text":"Bind two summarised_result objects","code":""},{"path":"https://darwin-eu-dev.github.io/omopgenerics/reference/bind.summarised_result.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Bind two or summarised_result objects — bind.summarised_result","text":"","code":"# S3 method for class 'summarised_result' bind(...)"},{"path":"https://darwin-eu-dev.github.io/omopgenerics/reference/bind.summarised_result.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Bind two or summarised_result objects — bind.summarised_result","text":"... summarised_result objects","code":""},{"path":"https://darwin-eu-dev.github.io/omopgenerics/reference/bind.summarised_result.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Bind two or summarised_result objects — bind.summarised_result","text":"summarised_result object merged objects.","code":""},{"path":"https://darwin-eu-dev.github.io/omopgenerics/reference/bind.summarised_result.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Bind two or summarised_result objects — bind.summarised_result","text":"","code":"library(omopgenerics) library(dplyr, warn.conflicts = FALSE)  cdm <- cdmFromTables(   tables = list(     \"person\" = tibble(       person_id = c(1, 2, 3), gender_concept_id = 0, year_of_birth = 1990,       race_concept_id = 0, ethnicity_concept_id = 0     ),     \"observation_period\" = tibble(       observation_period_id = 1:3, person_id = 1:3,       observation_period_start_date = as.Date(\"2000-01-01\"),       observation_period_end_date = as.Date(\"2023-12-31\"),       period_type_concept_id = 0     )   ),   cdmName = \"mock\",   cohortTables = list(\"cohort1\" = tibble(     cohort_definition_id = 1,     subject_id = 1:3,     cohort_start_date = as.Date(\"2010-01-01\"),     cohort_end_date = as.Date(\"2010-01-05\")   )) ) #> Warning: ! 5 column in person do not match expected column type: #> • `person_id` is numeric but expected integer #> • `gender_concept_id` is numeric but expected integer #> • `year_of_birth` is numeric but expected integer #> • `race_concept_id` is numeric but expected integer #> • `ethnicity_concept_id` is numeric but expected integer #> Warning: ! 1 column in observation_period do not match expected column type: #> • `period_type_concept_id` is numeric but expected integer #> Warning: ! 1 column in cohort1 do not match expected column type: #> • `cohort_definition_id` is numeric but expected integer  result1 <- summary(cdm) result2 <- summary(cdm$cohort1)  mergedResult <- bind(result1, result2) mergedResult #> # A tibble: 19 × 13 #>    result_id cdm_name group_name  group_level strata_name strata_level           #>        <int> <chr>    <chr>       <chr>       <chr>       <chr>                  #>  1         1 mock     overall     overall     overall     overall                #>  2         1 mock     overall     overall     overall     overall                #>  3         1 mock     overall     overall     overall     overall                #>  4         1 mock     overall     overall     overall     overall                #>  5         1 mock     overall     overall     overall     overall                #>  6         1 mock     overall     overall     overall     overall                #>  7         1 mock     overall     overall     overall     overall                #>  8         1 mock     overall     overall     overall     overall                #>  9         1 mock     overall     overall     overall     overall                #> 10         1 mock     overall     overall     overall     overall                #> 11         1 mock     overall     overall     overall     overall                #> 12         1 mock     overall     overall     overall     overall                #> 13         1 mock     overall     overall     overall     overall                #> 14         2 mock     cohort_name cohort_1    overall     overall                #> 15         2 mock     cohort_name cohort_1    overall     overall                #> 16         3 mock     cohort_name cohort_1    reason      Initial qualifying ev… #> 17         3 mock     cohort_name cohort_1    reason      Initial qualifying ev… #> 18         3 mock     cohort_name cohort_1    reason      Initial qualifying ev… #> 19         3 mock     cohort_name cohort_1    reason      Initial qualifying ev… #> # ℹ 7 more variables: variable_name <chr>, variable_level <chr>, #> #   estimate_name <chr>, estimate_type <chr>, estimate_value <chr>, #> #   additional_name <chr>, additional_level <chr>"},{"path":"https://darwin-eu-dev.github.io/omopgenerics/reference/cash-.cdm_reference.html","id":null,"dir":"Reference","previous_headings":"","what":"Subset a cdm reference object. — $.cdm_reference","title":"Subset a cdm reference object. — $.cdm_reference","text":"Subset cdm reference object.","code":""},{"path":"https://darwin-eu-dev.github.io/omopgenerics/reference/cash-.cdm_reference.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Subset a cdm reference object. — $.cdm_reference","text":"","code":"# S3 method for class 'cdm_reference' x$name"},{"path":"https://darwin-eu-dev.github.io/omopgenerics/reference/cash-.cdm_reference.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Subset a cdm reference object. — $.cdm_reference","text":"x cdm reference. name name table extract cdm object.","code":""},{"path":"https://darwin-eu-dev.github.io/omopgenerics/reference/cash-.cdm_reference.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Subset a cdm reference object. — $.cdm_reference","text":"single cdm table reference","code":""},{"path":"https://darwin-eu-dev.github.io/omopgenerics/reference/cash-.cdm_reference.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Subset a cdm reference object. — $.cdm_reference","text":"","code":"# \\donttest{ library(omopgenerics) library(dplyr, warn.conflicts = FALSE)  cdm <- cdmFromTables(   tables = list(     \"person\" = tibble(       person_id = c(1, 2, 3), gender_concept_id = 0, year_of_birth = 1990,       race_concept_id = 0, ethnicity_concept_id = 0     ),     \"observation_period\" = tibble(       observation_period_id = 1:3, person_id = 1:3,       observation_period_start_date = as.Date(\"2000-01-01\"),       observation_period_end_date = as.Date(\"2023-12-31\"),       period_type_concept_id = 0     )   ),   cdmName = \"mock\" ) #> Warning: ! 5 column in person do not match expected column type: #> • `person_id` is numeric but expected integer #> • `gender_concept_id` is numeric but expected integer #> • `year_of_birth` is numeric but expected integer #> • `race_concept_id` is numeric but expected integer #> • `ethnicity_concept_id` is numeric but expected integer #> Warning: ! 1 column in observation_period do not match expected column type: #> • `period_type_concept_id` is numeric but expected integer  cdm$person #> # A tibble: 3 × 5 #>   person_id gender_concept_id year_of_birth race_concept_id ethnicity_concept_id #> *     <dbl>             <dbl>         <dbl>           <dbl>                <dbl> #> 1         1                 0          1990               0                    0 #> 2         2                 0          1990               0                    0 #> 3         3                 0          1990               0                    0 # }"},{"path":"https://darwin-eu-dev.github.io/omopgenerics/reference/cash-set-.cdm_reference.html","id":null,"dir":"Reference","previous_headings":"","what":"Assign an table to a cdm reference. — $<-.cdm_reference","title":"Assign an table to a cdm reference. — $<-.cdm_reference","text":"Assign table cdm reference.","code":""},{"path":"https://darwin-eu-dev.github.io/omopgenerics/reference/cash-set-.cdm_reference.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Assign an table to a cdm reference. — $<-.cdm_reference","text":"","code":"# S3 method for class 'cdm_reference' cdm$name <- value"},{"path":"https://darwin-eu-dev.github.io/omopgenerics/reference/cash-set-.cdm_reference.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Assign an table to a cdm reference. — $<-.cdm_reference","text":"cdm cdm reference. name Name assign new table. value Table source cdm object.","code":""},{"path":"https://darwin-eu-dev.github.io/omopgenerics/reference/cash-set-.cdm_reference.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Assign an table to a cdm reference. — $<-.cdm_reference","text":"cdm reference.","code":""},{"path":"https://darwin-eu-dev.github.io/omopgenerics/reference/cash-set-.cdm_reference.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Assign an table to a cdm reference. — $<-.cdm_reference","text":"","code":"# \\donttest{ library(omopgenerics)  cdm <- cdmFromTables(   tables = list(     \"person\" = dplyr::tibble(       person_id = c(1, 2, 3), gender_concept_id = 0, year_of_birth = 1990,       race_concept_id = 0, ethnicity_concept_id = 0     ),     \"observation_period\" = dplyr::tibble(       observation_period_id = 1:3, person_id = 1:3,       observation_period_start_date = as.Date(\"2000-01-01\"),       observation_period_end_date = as.Date(\"2023-12-31\"),       period_type_concept_id = 0     )   ),   cdmName = \"mock\" ) #> Warning: ! 5 column in person do not match expected column type: #> • `person_id` is numeric but expected integer #> • `gender_concept_id` is numeric but expected integer #> • `year_of_birth` is numeric but expected integer #> • `race_concept_id` is numeric but expected integer #> • `ethnicity_concept_id` is numeric but expected integer #> Warning: ! 1 column in observation_period do not match expected column type: #> • `period_type_concept_id` is numeric but expected integer  cdm$person #> # A tibble: 3 × 5 #>   person_id gender_concept_id year_of_birth race_concept_id ethnicity_concept_id #> *     <dbl>             <dbl>         <dbl>           <dbl>                <dbl> #> 1         1                 0          1990               0                    0 #> 2         2                 0          1990               0                    0 #> 3         3                 0          1990               0                    0 # }"},{"path":"https://darwin-eu-dev.github.io/omopgenerics/reference/cdmFromTables.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a cdm object from local tables — cdmFromTables","title":"Create a cdm object from local tables — cdmFromTables","text":"Create cdm object local tables","code":""},{"path":"https://darwin-eu-dev.github.io/omopgenerics/reference/cdmFromTables.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a cdm object from local tables — cdmFromTables","text":"","code":"cdmFromTables(tables, cdmName, cohortTables = list(), cdmVersion = NULL)"},{"path":"https://darwin-eu-dev.github.io/omopgenerics/reference/cdmFromTables.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a cdm object from local tables — cdmFromTables","text":"tables List tables part cdm object. cdmName Name cdm object. cohortTables List tables contains cohort, cohort_set cohort_attrition can provided attributes. cdmVersion Version cdm_reference","code":""},{"path":"https://darwin-eu-dev.github.io/omopgenerics/reference/cdmFromTables.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create a cdm object from local tables — cdmFromTables","text":"cdm_reference object.","code":""},{"path":"https://darwin-eu-dev.github.io/omopgenerics/reference/cdmFromTables.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create a cdm object from local tables — cdmFromTables","text":"","code":"# \\donttest{ library(omopgenerics) library(dplyr, warn.conflicts = FALSE)  person <- tibble(   person_id = 1, gender_concept_id = 0, year_of_birth = 1990,   race_concept_id = 0, ethnicity_concept_id = 0 ) observation_period <- tibble(   observation_period_id = 1, person_id = 1,   observation_period_start_date = as.Date(\"2000-01-01\"),   observation_period_end_date = as.Date(\"2023-12-31\"),   period_type_concept_id = 0 ) cdm <- cdmFromTables(   tables = list(\"person\" = person, \"observation_period\" = observation_period),   cdmName = \"test\" ) #> Warning: ! 5 column in person do not match expected column type: #> • `person_id` is numeric but expected integer #> • `gender_concept_id` is numeric but expected integer #> • `year_of_birth` is numeric but expected integer #> • `race_concept_id` is numeric but expected integer #> • `ethnicity_concept_id` is numeric but expected integer #> Warning: ! 3 column in observation_period do not match expected column type: #> • `observation_period_id` is numeric but expected integer #> • `person_id` is numeric but expected integer #> • `period_type_concept_id` is numeric but expected integer # }"},{"path":"https://darwin-eu-dev.github.io/omopgenerics/reference/cdmName.html","id":null,"dir":"Reference","previous_headings":"","what":"Get the name of a cdm_reference associated object — cdmName","title":"Get the name of a cdm_reference associated object — cdmName","text":"Get name cdm_reference associated object","code":""},{"path":"https://darwin-eu-dev.github.io/omopgenerics/reference/cdmName.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get the name of a cdm_reference associated object — cdmName","text":"","code":"cdmName(x)"},{"path":"https://darwin-eu-dev.github.io/omopgenerics/reference/cdmName.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get the name of a cdm_reference associated object — cdmName","text":"x cdm_reference cdm_table object.","code":""},{"path":"https://darwin-eu-dev.github.io/omopgenerics/reference/cdmName.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get the name of a cdm_reference associated object — cdmName","text":"Name cdm_reference.","code":""},{"path":"https://darwin-eu-dev.github.io/omopgenerics/reference/cdmName.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get the name of a cdm_reference associated object — cdmName","text":"","code":"# \\donttest{ library(omopgenerics) library(dplyr, warn.conflicts = FALSE)  cdm <- cdmFromTables(   tables = list(     \"person\" = tibble(       person_id = c(1, 2, 3), gender_concept_id = 0, year_of_birth = 1990,       race_concept_id = 0, ethnicity_concept_id = 0     ),     \"observation_period\" = tibble(       observation_period_id = 1:3, person_id = 1:3,       observation_period_start_date = as.Date(\"2000-01-01\"),       observation_period_end_date = as.Date(\"2023-12-31\"),       period_type_concept_id = 0     )   ),   cdmName = \"mock\" ) #> Warning: ! 5 column in person do not match expected column type: #> • `person_id` is numeric but expected integer #> • `gender_concept_id` is numeric but expected integer #> • `year_of_birth` is numeric but expected integer #> • `race_concept_id` is numeric but expected integer #> • `ethnicity_concept_id` is numeric but expected integer #> Warning: ! 1 column in observation_period do not match expected column type: #> • `period_type_concept_id` is numeric but expected integer  cdmName(cdm) #> [1] \"mock\"  cdmName(cdm$person) #> [1] \"mock\"  # }"},{"path":"https://darwin-eu-dev.github.io/omopgenerics/reference/cdmReference.html","id":null,"dir":"Reference","previous_headings":"","what":"Get the cdm_reference of a cdm_table. — cdmReference","title":"Get the cdm_reference of a cdm_table. — cdmReference","text":"Get cdm_reference cdm_table.","code":""},{"path":"https://darwin-eu-dev.github.io/omopgenerics/reference/cdmReference.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get the cdm_reference of a cdm_table. — cdmReference","text":"","code":"cdmReference(table)"},{"path":"https://darwin-eu-dev.github.io/omopgenerics/reference/cdmReference.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get the cdm_reference of a cdm_table. — cdmReference","text":"table cdm_table.","code":""},{"path":"https://darwin-eu-dev.github.io/omopgenerics/reference/cdmReference.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get the cdm_reference of a cdm_table. — cdmReference","text":"cdm_reference.","code":""},{"path":"https://darwin-eu-dev.github.io/omopgenerics/reference/cdmReference.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get the cdm_reference of a cdm_table. — cdmReference","text":"","code":"# \\donttest{ library(omopgenerics) library(dplyr, warn.conflicts = FALSE)  cdm <- cdmFromTables(   tables = list(     \"person\" = tibble(       person_id = c(1, 2, 3), gender_concept_id = 0, year_of_birth = 1990,       race_concept_id = 0, ethnicity_concept_id = 0     ),     \"observation_period\" = tibble(       observation_period_id = 1:3, person_id = 1:3,       observation_period_start_date = as.Date(\"2000-01-01\"),       observation_period_end_date = as.Date(\"2023-12-31\"),       period_type_concept_id = 0     )   ),   cdmName = \"mock\" ) #> Warning: ! 5 column in person do not match expected column type: #> • `person_id` is numeric but expected integer #> • `gender_concept_id` is numeric but expected integer #> • `year_of_birth` is numeric but expected integer #> • `race_concept_id` is numeric but expected integer #> • `ethnicity_concept_id` is numeric but expected integer #> Warning: ! 1 column in observation_period do not match expected column type: #> • `period_type_concept_id` is numeric but expected integer  cdmReference(cdm$person) #>  #> ── # OMOP CDM reference (local) of mock ──────────────────────────────────────── #> • omop tables: person, observation_period #> • cohort tables: - #> • achilles tables: - #> • other tables: - # }"},{"path":"https://darwin-eu-dev.github.io/omopgenerics/reference/cdmSelect.html","id":null,"dir":"Reference","previous_headings":"","what":"Restrict the cdm object to a subset of tables. — cdmSelect","title":"Restrict the cdm object to a subset of tables. — cdmSelect","text":"Restrict cdm object subset tables.","code":""},{"path":"https://darwin-eu-dev.github.io/omopgenerics/reference/cdmSelect.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Restrict the cdm object to a subset of tables. — cdmSelect","text":"","code":"cdmSelect(cdm, ...)"},{"path":"https://darwin-eu-dev.github.io/omopgenerics/reference/cdmSelect.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Restrict the cdm object to a subset of tables. — cdmSelect","text":"cdm cdm_reference object. ... Selection tables use, supports tidyselect expressions.","code":""},{"path":"https://darwin-eu-dev.github.io/omopgenerics/reference/cdmSelect.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Restrict the cdm object to a subset of tables. — cdmSelect","text":"cdm_reference specified tables.","code":""},{"path":"https://darwin-eu-dev.github.io/omopgenerics/reference/cdmSelect.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Restrict the cdm object to a subset of tables. — cdmSelect","text":"","code":"cdm <- emptyCdmReference(\"my cdm\") cdm #>  #> ── # OMOP CDM reference (local) of my cdm ────────────────────────────────────── #> • omop tables: person, observation_period #> • cohort tables: - #> • achilles tables: - #> • other tables: -  cdm |>   cdmSelect(\"person\") #>  #> ── # OMOP CDM reference (local) of my cdm ────────────────────────────────────── #> • omop tables: person #> • cohort tables: - #> • achilles tables: - #> • other tables: -"},{"path":"https://darwin-eu-dev.github.io/omopgenerics/reference/cdmSource.html","id":null,"dir":"Reference","previous_headings":"","what":"Get the cdmSource of an object. — cdmSource","title":"Get the cdmSource of an object. — cdmSource","text":"Get cdmSource object.","code":""},{"path":"https://darwin-eu-dev.github.io/omopgenerics/reference/cdmSource.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get the cdmSource of an object. — cdmSource","text":"","code":"cdmSource(x, cdm = lifecycle::deprecated())"},{"path":"https://darwin-eu-dev.github.io/omopgenerics/reference/cdmSource.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get the cdmSource of an object. — cdmSource","text":"x Object obtain cdmSource. cdm Deprecated, use x please.","code":""},{"path":"https://darwin-eu-dev.github.io/omopgenerics/reference/cdmSource.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get the cdmSource of an object. — cdmSource","text":"cdm_source object.","code":""},{"path":"https://darwin-eu-dev.github.io/omopgenerics/reference/cdmSource.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get the cdmSource of an object. — cdmSource","text":"","code":"# \\donttest{ library(omopgenerics) library(dplyr, warn.conflicts = FALSE)  cdm <- cdmFromTables(   tables = list(     \"person\" = tibble(       person_id = c(1, 2, 3), gender_concept_id = 0, year_of_birth = 1990,       race_concept_id = 0, ethnicity_concept_id = 0     ),     \"observation_period\" = tibble(       observation_period_id = 1:3, person_id = 1:3,       observation_period_start_date = as.Date(\"2000-01-01\"),       observation_period_end_date = as.Date(\"2023-12-31\"),       period_type_concept_id = 0     )   ),   cdmName = \"mock\" ) #> Warning: ! 5 column in person do not match expected column type: #> • `person_id` is numeric but expected integer #> • `gender_concept_id` is numeric but expected integer #> • `year_of_birth` is numeric but expected integer #> • `race_concept_id` is numeric but expected integer #> • `ethnicity_concept_id` is numeric but expected integer #> Warning: ! 1 column in observation_period do not match expected column type: #> • `period_type_concept_id` is numeric but expected integer  cdmSource(cdm) #> This is a local cdm source cdmSource(cdm$person) #> This is a local cdm source # }"},{"path":[]},{"path":"https://darwin-eu-dev.github.io/omopgenerics/reference/cdmSourceType.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get the source type of a cdm_reference object. — cdmSourceType","text":"","code":"cdmSourceType(cdm)"},{"path":"https://darwin-eu-dev.github.io/omopgenerics/reference/cdmSourceType.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get the source type of a cdm_reference object. — cdmSourceType","text":"cdm cdm_reference object.","code":""},{"path":"https://darwin-eu-dev.github.io/omopgenerics/reference/cdmSourceType.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get the source type of a cdm_reference object. — cdmSourceType","text":"character vector type source cdm_reference object.","code":""},{"path":"https://darwin-eu-dev.github.io/omopgenerics/reference/cdmSourceType.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get the source type of a cdm_reference object. — cdmSourceType","text":"","code":"# \\donttest{ library(omopgenerics) library(dplyr, warn.conflicts = FALSE)  cdm <- cdmFromTables(   tables = list(     \"person\" = tibble(       person_id = c(1, 2, 3), gender_concept_id = 0, year_of_birth = 1990,       race_concept_id = 0, ethnicity_concept_id = 0     ),     \"observation_period\" = tibble(       observation_period_id = 1:3, person_id = 1:3,       observation_period_start_date = as.Date(\"2000-01-01\"),       observation_period_end_date = as.Date(\"2023-12-31\"),       period_type_concept_id = 0     )   ),   cdmName = \"mock\" ) #> Warning: ! 5 column in person do not match expected column type: #> • `person_id` is numeric but expected integer #> • `gender_concept_id` is numeric but expected integer #> • `year_of_birth` is numeric but expected integer #> • `race_concept_id` is numeric but expected integer #> • `ethnicity_concept_id` is numeric but expected integer #> Warning: ! 1 column in observation_period do not match expected column type: #> • `period_type_concept_id` is numeric but expected integer  cdmSourceType(cdm) #> Warning: `cdmSourceType()` was deprecated in omopgenerics 0.3.0. #> ℹ Please use `sourceType()` instead. #> [1] \"local\" # }"},{"path":"https://darwin-eu-dev.github.io/omopgenerics/reference/cdmTableFromSource.html","id":null,"dir":"Reference","previous_headings":"","what":"This is an internal developer focused function that creates a cdm_table from a table that shares the source but it is not a cdm_table. Please use insertTable if you want to insert a table to a cdm_reference object. — cdmTableFromSource","title":"This is an internal developer focused function that creates a cdm_table from a table that shares the source but it is not a cdm_table. Please use insertTable if you want to insert a table to a cdm_reference object. — cdmTableFromSource","text":"internal developer focused function creates cdm_table table shares source cdm_table. Please use insertTable want insert table cdm_reference object.","code":""},{"path":"https://darwin-eu-dev.github.io/omopgenerics/reference/cdmTableFromSource.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"This is an internal developer focused function that creates a cdm_table from a table that shares the source but it is not a cdm_table. Please use insertTable if you want to insert a table to a cdm_reference object. — cdmTableFromSource","text":"","code":"cdmTableFromSource(src, value)"},{"path":"https://darwin-eu-dev.github.io/omopgenerics/reference/cdmTableFromSource.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"This is an internal developer focused function that creates a cdm_table from a table that shares the source but it is not a cdm_table. Please use insertTable if you want to insert a table to a cdm_reference object. — cdmTableFromSource","text":"src cdm_source object. value table shares source cdm_reference object.","code":""},{"path":"https://darwin-eu-dev.github.io/omopgenerics/reference/cdmTableFromSource.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"This is an internal developer focused function that creates a cdm_table from a table that shares the source but it is not a cdm_table. Please use insertTable if you want to insert a table to a cdm_reference object. — cdmTableFromSource","text":"cdm_table.","code":""},{"path":"https://darwin-eu-dev.github.io/omopgenerics/reference/cdmVersion.html","id":null,"dir":"Reference","previous_headings":"","what":"Get the version of an object. — cdmVersion","title":"Get the version of an object. — cdmVersion","text":"Get version object.","code":""},{"path":"https://darwin-eu-dev.github.io/omopgenerics/reference/cdmVersion.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get the version of an object. — cdmVersion","text":"","code":"cdmVersion(x)"},{"path":"https://darwin-eu-dev.github.io/omopgenerics/reference/cdmVersion.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get the version of an object. — cdmVersion","text":"x Object know cdm version object.","code":""},{"path":"https://darwin-eu-dev.github.io/omopgenerics/reference/cdmVersion.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get the version of an object. — cdmVersion","text":"character vector indicating cdm version.","code":""},{"path":"https://darwin-eu-dev.github.io/omopgenerics/reference/cdmVersion.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get the version of an object. — cdmVersion","text":"","code":"# \\donttest{ library(omopgenerics) library(dplyr, warn.conflicts = FALSE)  cdm <- cdmFromTables(   tables = list(     \"person\" = tibble(       person_id = c(1, 2, 3), gender_concept_id = 0, year_of_birth = 1990,       race_concept_id = 0, ethnicity_concept_id = 0     ),     \"observation_period\" = tibble(       observation_period_id = 1:3, person_id = 1:3,       observation_period_start_date = as.Date(\"2000-01-01\"),       observation_period_end_date = as.Date(\"2023-12-31\"),       period_type_concept_id = 0     )   ),   cdmName = \"mock\" ) #> Warning: ! 5 column in person do not match expected column type: #> • `person_id` is numeric but expected integer #> • `gender_concept_id` is numeric but expected integer #> • `year_of_birth` is numeric but expected integer #> • `race_concept_id` is numeric but expected integer #> • `ethnicity_concept_id` is numeric but expected integer #> Warning: ! 1 column in observation_period do not match expected column type: #> • `period_type_concept_id` is numeric but expected integer  cdmVersion(cdm) #> [1] \"5.3\" cdmVersion(cdm$person) #> [1] \"5.3\" # }"},{"path":[]},{"path":"https://darwin-eu-dev.github.io/omopgenerics/reference/checkCohortRequirements.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check whether a cohort table satisfies requirements — checkCohortRequirements","text":"","code":"checkCohortRequirements(   cohort,   checkEndAfterStart = TRUE,   checkOverlappingEntries = TRUE,   checkMissingValues = TRUE,   checkInObservation = TRUE,   type = \"error\",   call = parent.frame() )"},{"path":"https://darwin-eu-dev.github.io/omopgenerics/reference/checkCohortRequirements.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check whether a cohort table satisfies requirements — checkCohortRequirements","text":"cohort cohort_table object. checkEndAfterStart TRUE check cohort end dates come cohort start date performed. checkOverlappingEntries TRUE check individuals overlapping cohort entries performed. checkMissingValues TRUE check missing values required fields performed. checkInObservation TRUE check cohort entries within individuals observation periods performed. type Can either \"error\" \"warning\". \"error\" check failure result error, whereas \"warning\" check failure result warning. call call return error message.","code":""},{"path":"https://darwin-eu-dev.github.io/omopgenerics/reference/checkCohortRequirements.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Check whether a cohort table satisfies requirements — checkCohortRequirements","text":"error returned selected checks fail.","code":""},{"path":"https://darwin-eu-dev.github.io/omopgenerics/reference/cohortCodelist.html","id":null,"dir":"Reference","previous_headings":"","what":"Get codelist from a cohort_table object. — cohortCodelist","title":"Get codelist from a cohort_table object. — cohortCodelist","text":"Get codelist cohort_table object.","code":""},{"path":"https://darwin-eu-dev.github.io/omopgenerics/reference/cohortCodelist.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get codelist from a cohort_table object. — cohortCodelist","text":"","code":"cohortCodelist(   cohortTable,   cohortId,   type = c(\"index event\", \"inclusion criteria\", \"exclusion criteria\", \"exit criteria\") )"},{"path":"https://darwin-eu-dev.github.io/omopgenerics/reference/cohortCodelist.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get codelist from a cohort_table object. — cohortCodelist","text":"cohortTable cohort_table object. cohortId particular cohort definition id present cohort table. type reason codelist. Can \"index event\", \"inclusion criteria\", \"exit criteria\".","code":""},{"path":"https://darwin-eu-dev.github.io/omopgenerics/reference/cohortCodelist.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get codelist from a cohort_table object. — cohortCodelist","text":"table codelists used.","code":""},{"path":"https://darwin-eu-dev.github.io/omopgenerics/reference/cohortCodelist.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get codelist from a cohort_table object. — cohortCodelist","text":"","code":"# \\donttest{ library(omopgenerics) library(dplyr, warn.conflicts = FALSE)  person <- tibble(   person_id = 1, gender_concept_id = 0, year_of_birth = 1990,   race_concept_id = 0, ethnicity_concept_id = 0 ) observation_period <- tibble(   observation_period_id = 1, person_id = 1,   observation_period_start_date = as.Date(\"2000-01-01\"),   observation_period_end_date = as.Date(\"2023-12-31\"),   period_type_concept_id = 0 ) cohort <- tibble(   cohort_definition_id = c(1, 1, 1, 2),   subject_id = 1,   cohort_start_date = as.Date(c(     \"2020-01-01\", \"2021-01-01\", \"2022-01-01\", \"2022-01-01\"   )),   cohort_end_date = as.Date(c(     \"2020-01-01\", \"2021-01-01\", \"2022-01-01\", \"2022-01-01\"   )) ) cdm <- cdmFromTables(   tables = list(\"person\" = person, \"observation_period\" = observation_period),   cdmName = \"my_example_cdm\",   cohortTables = list(\"cohort1\" = cohort) ) #> Warning: ! 5 column in person do not match expected column type: #> • `person_id` is numeric but expected integer #> • `gender_concept_id` is numeric but expected integer #> • `year_of_birth` is numeric but expected integer #> • `race_concept_id` is numeric but expected integer #> • `ethnicity_concept_id` is numeric but expected integer #> Warning: ! 3 column in observation_period do not match expected column type: #> • `observation_period_id` is numeric but expected integer #> • `person_id` is numeric but expected integer #> • `period_type_concept_id` is numeric but expected integer #> Warning: ! 2 column in cohort1 do not match expected column type: #> • `cohort_definition_id` is numeric but expected integer #> • `subject_id` is numeric but expected integer cdm$cohort1 <- newCohortTable(table = cdm$cohort1,                                 cohortCodelistRef = dplyr::tibble(                                 cohort_definition_id = c(1,1,1,2,2),                                 codelist_name =c(\"disease X\", \"disease X\", \"disease X\",                                                  \"disease Y\", \"disease Y\"),                                 concept_id = c(1,2,3,4,5),                                 type = \"index event\"                               )) #> Warning: ! 2 casted column in cohort1 (cohort_codelist) as do not match expected column #>   type: #> • `cohort_definition_id` from numeric to integer #> • `concept_id` from numeric to integer #> Warning: ! 2 column in cohort1 do not match expected column type: #> • `cohort_definition_id` is numeric but expected integer #> • `subject_id` is numeric but expected integer cohortCodelist(cdm$cohort1, cohortId = 1, type = \"index event\") #>  #> ── 1 codelist ────────────────────────────────────────────────────────────────── #>  #> - disease X (3 codes) # }"},{"path":"https://darwin-eu-dev.github.io/omopgenerics/reference/cohortColumns.html","id":null,"dir":"Reference","previous_headings":"","what":"Required columns for a generated cohort set. — cohortColumns","title":"Required columns for a generated cohort set. — cohortColumns","text":"Required columns generated cohort set.","code":""},{"path":"https://darwin-eu-dev.github.io/omopgenerics/reference/cohortColumns.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Required columns for a generated cohort set. — cohortColumns","text":"","code":"cohortColumns(table, version = \"5.3\")"},{"path":"https://darwin-eu-dev.github.io/omopgenerics/reference/cohortColumns.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Required columns for a generated cohort set. — cohortColumns","text":"table Either cohort, cohort_set cohort_attrition version Version OMOP Common Data Model.","code":""},{"path":"https://darwin-eu-dev.github.io/omopgenerics/reference/cohortColumns.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Required columns for a generated cohort set. — cohortColumns","text":"Character vector column names Required columns","code":""},{"path":"https://darwin-eu-dev.github.io/omopgenerics/reference/cohortColumns.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Required columns for a generated cohort set. — cohortColumns","text":"","code":"# \\donttest{ library(omopgenerics) cohortColumns(\"cohort\") #> [1] \"cohort_definition_id\" \"subject_id\"           \"cohort_start_date\"    #> [4] \"cohort_end_date\"      # }"},{"path":"https://darwin-eu-dev.github.io/omopgenerics/reference/cohortCount.html","id":null,"dir":"Reference","previous_headings":"","what":"Get cohort counts from a cohort_table object. — cohortCount","title":"Get cohort counts from a cohort_table object. — cohortCount","text":"Get cohort counts cohort_table object.","code":""},{"path":"https://darwin-eu-dev.github.io/omopgenerics/reference/cohortCount.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get cohort counts from a cohort_table object. — cohortCount","text":"","code":"cohortCount(cohort)"},{"path":"https://darwin-eu-dev.github.io/omopgenerics/reference/cohortCount.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get cohort counts from a cohort_table object. — cohortCount","text":"cohort cohort_table object.","code":""},{"path":"https://darwin-eu-dev.github.io/omopgenerics/reference/cohortCount.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get cohort counts from a cohort_table object. — cohortCount","text":"table counts.","code":""},{"path":"https://darwin-eu-dev.github.io/omopgenerics/reference/cohortCount.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get cohort counts from a cohort_table object. — cohortCount","text":"","code":"# \\donttest{ library(omopgenerics) library(dplyr, warn.conflicts = FALSE)  person <- tibble(   person_id = 1, gender_concept_id = 0, year_of_birth = 1990,   race_concept_id = 0, ethnicity_concept_id = 0 ) observation_period <- tibble(   observation_period_id = 1, person_id = 1,   observation_period_start_date = as.Date(\"2000-01-01\"),   observation_period_end_date = as.Date(\"2023-12-31\"),   period_type_concept_id = 0 ) cohort <- tibble(   cohort_definition_id = c(1, 1, 1, 2),   subject_id = 1,   cohort_start_date = as.Date(c(     \"2020-01-01\", \"2021-01-01\", \"2022-01-01\", \"2022-01-01\"   )),   cohort_end_date = as.Date(c(     \"2020-01-01\", \"2021-01-01\", \"2022-01-01\", \"2022-01-01\"   )), ) cdm <- cdmFromTables(   tables = list(\"person\" = person, \"observation_period\" = observation_period),   cdmName = \"my_example_cdm\",   cohortTables = list(\"cohort1\" = cohort) ) #> Warning: ! 5 column in person do not match expected column type: #> • `person_id` is numeric but expected integer #> • `gender_concept_id` is numeric but expected integer #> • `year_of_birth` is numeric but expected integer #> • `race_concept_id` is numeric but expected integer #> • `ethnicity_concept_id` is numeric but expected integer #> Warning: ! 3 column in observation_period do not match expected column type: #> • `observation_period_id` is numeric but expected integer #> • `person_id` is numeric but expected integer #> • `period_type_concept_id` is numeric but expected integer #> Warning: ! 2 column in cohort1 do not match expected column type: #> • `cohort_definition_id` is numeric but expected integer #> • `subject_id` is numeric but expected integer  cohortCount(cdm$cohort1) #> # A tibble: 2 × 3 #>   cohort_definition_id number_records number_subjects #>                  <int>          <int>           <int> #> 1                    1              3               1 #> 2                    2              1               1 # }"},{"path":"https://darwin-eu-dev.github.io/omopgenerics/reference/cohortTables.html","id":null,"dir":"Reference","previous_headings":"","what":"Cohort tables that a cdm reference can contain in the OMOP Common Data Model. — cohortTables","title":"Cohort tables that a cdm reference can contain in the OMOP Common Data Model. — cohortTables","text":"Cohort tables cdm reference can contain OMOP Common Data Model.","code":""},{"path":"https://darwin-eu-dev.github.io/omopgenerics/reference/cohortTables.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Cohort tables that a cdm reference can contain in the OMOP Common Data Model. — cohortTables","text":"","code":"cohortTables(version = \"5.3\")"},{"path":"https://darwin-eu-dev.github.io/omopgenerics/reference/cohortTables.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Cohort tables that a cdm reference can contain in the OMOP Common Data Model. — cohortTables","text":"version Version OMOP Common Data Model.","code":""},{"path":"https://darwin-eu-dev.github.io/omopgenerics/reference/cohortTables.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Cohort tables that a cdm reference can contain in the OMOP Common Data Model. — cohortTables","text":"cohort tables","code":""},{"path":"https://darwin-eu-dev.github.io/omopgenerics/reference/cohortTables.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Cohort tables that a cdm reference can contain in the OMOP Common Data Model. — cohortTables","text":"","code":"# \\donttest{ library(omopgenerics) cohortTables() #> [1] \"cohort\"           \"cohort_set\"       \"cohort_attrition\" \"cohort_codelist\"  # }"},{"path":"https://darwin-eu-dev.github.io/omopgenerics/reference/collect.cdm_reference.html","id":null,"dir":"Reference","previous_headings":"","what":"Retrieves the cdm reference into a local cdm. — collect.cdm_reference","title":"Retrieves the cdm reference into a local cdm. — collect.cdm_reference","text":"Retrieves cdm reference local cdm.","code":""},{"path":"https://darwin-eu-dev.github.io/omopgenerics/reference/collect.cdm_reference.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Retrieves the cdm reference into a local cdm. — collect.cdm_reference","text":"","code":"# S3 method for class 'cdm_reference' collect(x, ...)"},{"path":"https://darwin-eu-dev.github.io/omopgenerics/reference/collect.cdm_reference.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Retrieves the cdm reference into a local cdm. — collect.cdm_reference","text":"x cdm_reference object. ... compatibility , used.","code":""},{"path":"https://darwin-eu-dev.github.io/omopgenerics/reference/collect.cdm_reference.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Retrieves the cdm reference into a local cdm. — collect.cdm_reference","text":"local cdm_reference.","code":""},{"path":"https://darwin-eu-dev.github.io/omopgenerics/reference/collect.cdm_reference.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Retrieves the cdm reference into a local cdm. — collect.cdm_reference","text":"","code":"# \\donttest{ library(omopgenerics) library(dplyr, warn.conflicts = FALSE)  cdm <- cdmFromTables(   tables = list(     \"person\" = dplyr::tibble(       person_id = c(1, 2, 3), gender_concept_id = 0, year_of_birth = 1990,       race_concept_id = 0, ethnicity_concept_id = 0     ),     \"observation_period\" = dplyr::tibble(       observation_period_id = 1:3, person_id = 1:3,       observation_period_start_date = as.Date(\"2000-01-01\"),       observation_period_end_date = as.Date(\"2023-12-31\"),       period_type_concept_id = 0     )   ),   cdmName = \"mock\" ) #> Warning: ! 5 column in person do not match expected column type: #> • `person_id` is numeric but expected integer #> • `gender_concept_id` is numeric but expected integer #> • `year_of_birth` is numeric but expected integer #> • `race_concept_id` is numeric but expected integer #> • `ethnicity_concept_id` is numeric but expected integer #> Warning: ! 1 column in observation_period do not match expected column type: #> • `period_type_concept_id` is numeric but expected integer  collect(cdm) #> Warning: ! 5 column in person do not match expected column type: #> • `person_id` is numeric but expected integer #> • `gender_concept_id` is numeric but expected integer #> • `year_of_birth` is numeric but expected integer #> • `race_concept_id` is numeric but expected integer #> • `ethnicity_concept_id` is numeric but expected integer #> Warning: ! 1 column in observation_period do not match expected column type: #> • `period_type_concept_id` is numeric but expected integer #>  #> ── # OMOP CDM reference (local) of mock ──────────────────────────────────────── #> • omop tables: person, observation_period #> • cohort tables: - #> • achilles tables: - #> • other tables: - # }"},{"path":"https://darwin-eu-dev.github.io/omopgenerics/reference/collect.cohort_table.html","id":null,"dir":"Reference","previous_headings":"","what":"To collect a cohort_table object. — collect.cohort_table","title":"To collect a cohort_table object. — collect.cohort_table","text":"collect cohort_table object.","code":""},{"path":"https://darwin-eu-dev.github.io/omopgenerics/reference/collect.cohort_table.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"To collect a cohort_table object. — collect.cohort_table","text":"","code":"# S3 method for class 'cohort_table' collect(x, ...)"},{"path":"https://darwin-eu-dev.github.io/omopgenerics/reference/collect.cohort_table.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"To collect a cohort_table object. — collect.cohort_table","text":"x cohort_table object. ... used (compatibility).","code":""},{"path":"https://darwin-eu-dev.github.io/omopgenerics/reference/collect.cohort_table.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"To collect a cohort_table object. — collect.cohort_table","text":"data frame cohort_table","code":""},{"path":"https://darwin-eu-dev.github.io/omopgenerics/reference/compute.cdm_table.html","id":null,"dir":"Reference","previous_headings":"","what":"Store results in a table. — compute.cdm_table","title":"Store results in a table. — compute.cdm_table","text":"Store results table.","code":""},{"path":"https://darwin-eu-dev.github.io/omopgenerics/reference/compute.cdm_table.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Store results in a table. — compute.cdm_table","text":"","code":"# S3 method for class 'cdm_table' compute(x, name = NULL, temporary = NULL, overwrite = TRUE, ...)"},{"path":"https://darwin-eu-dev.github.io/omopgenerics/reference/compute.cdm_table.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Store results in a table. — compute.cdm_table","text":"x Table cdm. name Name store table . temporary Whether store table temporarily (TRUE) permanently (FALSE). overwrite Whether overwrite previously existing table name . ... compatibility (used).","code":""},{"path":"https://darwin-eu-dev.github.io/omopgenerics/reference/compute.cdm_table.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Store results in a table. — compute.cdm_table","text":"Reference table cdm","code":""},{"path":"https://darwin-eu-dev.github.io/omopgenerics/reference/dropSourceTable.html","id":null,"dir":"Reference","previous_headings":"","what":"Drop a table from a cdm object. — dropSourceTable","title":"Drop a table from a cdm object. — dropSourceTable","text":"Drop table cdm object.","code":""},{"path":"https://darwin-eu-dev.github.io/omopgenerics/reference/dropSourceTable.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Drop a table from a cdm object. — dropSourceTable","text":"","code":"dropSourceTable(cdm, name)"},{"path":"https://darwin-eu-dev.github.io/omopgenerics/reference/dropSourceTable.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Drop a table from a cdm object. — dropSourceTable","text":"cdm cdm reference. name Name(s) table(s) insert. Tidyselect statements supported.","code":""},{"path":"https://darwin-eu-dev.github.io/omopgenerics/reference/dropSourceTable.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Drop a table from a cdm object. — dropSourceTable","text":"table cdm reference.","code":""},{"path":"https://darwin-eu-dev.github.io/omopgenerics/reference/dropTable.html","id":null,"dir":"Reference","previous_headings":"","what":"Drop a table from a cdm object. — dropTable","title":"Drop a table from a cdm object. — dropTable","text":"Drop table cdm object.","code":""},{"path":"https://darwin-eu-dev.github.io/omopgenerics/reference/dropTable.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Drop a table from a cdm object. — dropTable","text":"","code":"dropTable(cdm, name)"},{"path":"https://darwin-eu-dev.github.io/omopgenerics/reference/dropTable.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Drop a table from a cdm object. — dropTable","text":"cdm cdm reference. name Name(s) table(s) drop Tidyselect statements supported.","code":""},{"path":"https://darwin-eu-dev.github.io/omopgenerics/reference/dropTable.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Drop a table from a cdm object. — dropTable","text":"cdm reference.","code":""},{"path":"https://darwin-eu-dev.github.io/omopgenerics/reference/dropTable.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Drop a table from a cdm object. — dropTable","text":"","code":"library(omopgenerics) library(dplyr, warn.conflicts = FALSE)  person <- tibble(   person_id = 1, gender_concept_id = 0, year_of_birth = 1990,   race_concept_id = 0, ethnicity_concept_id = 0 ) observation_period <- tibble(   observation_period_id = 1, person_id = 1,   observation_period_start_date = as.Date(\"2000-01-01\"),   observation_period_end_date = as.Date(\"2023-12-31\"),   period_type_concept_id = 0 ) cohort <- tibble(   cohort_definition_id = c(1, 1, 1, 2),   subject_id = 1,   cohort_start_date = as.Date(c(     \"2020-01-01\", \"2021-01-01\", \"2022-01-01\", \"2022-01-01\"   )),   cohort_end_date = as.Date(c(     \"2020-01-01\", \"2021-01-01\", \"2022-01-01\", \"2022-01-01\"   )), ) cdm <- cdmFromTables(   tables = list(\"person\" = person, \"observation_period\" = observation_period),   cdmName = \"my_example_cdm\",   cohortTables = list(\"cohort1\" = cohort) ) #> Warning: ! 5 column in person do not match expected column type: #> • `person_id` is numeric but expected integer #> • `gender_concept_id` is numeric but expected integer #> • `year_of_birth` is numeric but expected integer #> • `race_concept_id` is numeric but expected integer #> • `ethnicity_concept_id` is numeric but expected integer #> Warning: ! 3 column in observation_period do not match expected column type: #> • `observation_period_id` is numeric but expected integer #> • `person_id` is numeric but expected integer #> • `period_type_concept_id` is numeric but expected integer #> Warning: ! 2 column in cohort1 do not match expected column type: #> • `cohort_definition_id` is numeric but expected integer #> • `subject_id` is numeric but expected integer  cdm #>  #> ── # OMOP CDM reference (local) of my_example_cdm ────────────────────────────── #> • omop tables: person, observation_period #> • cohort tables: cohort1 #> • achilles tables: - #> • other tables: -  cdm <- dropTable(cdm = cdm, name = \"cohort1\")  cdm #>  #> ── # OMOP CDM reference (local) of my_example_cdm ────────────────────────────── #> • omop tables: person, observation_period #> • cohort tables: - #> • achilles tables: - #> • other tables: -"},{"path":"https://darwin-eu-dev.github.io/omopgenerics/reference/emptyAchillesTable.html","id":null,"dir":"Reference","previous_headings":"","what":"Create an empty achilles table — emptyAchillesTable","title":"Create an empty achilles table — emptyAchillesTable","text":"Create empty achilles table","code":""},{"path":"https://darwin-eu-dev.github.io/omopgenerics/reference/emptyAchillesTable.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create an empty achilles table — emptyAchillesTable","text":"","code":"emptyAchillesTable(cdm, name)"},{"path":"https://darwin-eu-dev.github.io/omopgenerics/reference/emptyAchillesTable.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create an empty achilles table — emptyAchillesTable","text":"cdm cdm_reference create table. name Name table create.","code":""},{"path":"https://darwin-eu-dev.github.io/omopgenerics/reference/emptyAchillesTable.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create an empty achilles table — emptyAchillesTable","text":"cdm_reference achilles empty table","code":""},{"path":"https://darwin-eu-dev.github.io/omopgenerics/reference/emptyAchillesTable.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create an empty achilles table — emptyAchillesTable","text":"","code":"# \\donttest{ library(omopgenerics) cdm <- emptyCdmReference(\"my_example_cdm\") emptyAchillesTable(cdm = cdm, name = \"achilles_results\" ) #>  #> ── # OMOP CDM reference (local) of my_example_cdm ────────────────────────────── #> • omop tables: person, observation_period #> • cohort tables: - #> • achilles tables: achilles_results #> • other tables: - # }"},{"path":"https://darwin-eu-dev.github.io/omopgenerics/reference/emptyCdmReference.html","id":null,"dir":"Reference","previous_headings":"","what":"Create an empty cdm_reference — emptyCdmReference","title":"Create an empty cdm_reference — emptyCdmReference","text":"Create empty cdm_reference","code":""},{"path":"https://darwin-eu-dev.github.io/omopgenerics/reference/emptyCdmReference.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create an empty cdm_reference — emptyCdmReference","text":"","code":"emptyCdmReference(cdmName, cdmVersion = NULL)"},{"path":"https://darwin-eu-dev.github.io/omopgenerics/reference/emptyCdmReference.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create an empty cdm_reference — emptyCdmReference","text":"cdmName Name cdm_reference cdmVersion Version cdm_reference","code":""},{"path":"https://darwin-eu-dev.github.io/omopgenerics/reference/emptyCdmReference.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create an empty cdm_reference — emptyCdmReference","text":"empty cdm_reference","code":""},{"path":"https://darwin-eu-dev.github.io/omopgenerics/reference/emptyCdmReference.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create an empty cdm_reference — emptyCdmReference","text":"","code":"# \\donttest{ library(omopgenerics) emptyCdmReference(cdmName = \"my_example_cdm\") #>  #> ── # OMOP CDM reference (local) of my_example_cdm ────────────────────────────── #> • omop tables: person, observation_period #> • cohort tables: - #> • achilles tables: - #> • other tables: - # }"},{"path":"https://darwin-eu-dev.github.io/omopgenerics/reference/emptyCodelist.html","id":null,"dir":"Reference","previous_headings":"","what":"Empty codelist object. — emptyCodelist","title":"Empty codelist object. — emptyCodelist","text":"Empty codelist object.","code":""},{"path":"https://darwin-eu-dev.github.io/omopgenerics/reference/emptyCodelist.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Empty codelist object. — emptyCodelist","text":"","code":"emptyCodelist()"},{"path":"https://darwin-eu-dev.github.io/omopgenerics/reference/emptyCodelist.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Empty codelist object. — emptyCodelist","text":"empty codelist object.","code":""},{"path":"https://darwin-eu-dev.github.io/omopgenerics/reference/emptyCodelist.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Empty codelist object. — emptyCodelist","text":"","code":"emptyCodelist() #>  #> ── 0 codelists ───────────────────────────────────────────────────────────────── #>"},{"path":"https://darwin-eu-dev.github.io/omopgenerics/reference/emptyCodelistWithDetails.html","id":null,"dir":"Reference","previous_headings":"","what":"Empty codelist object. — emptyCodelistWithDetails","title":"Empty codelist object. — emptyCodelistWithDetails","text":"Empty codelist object.","code":""},{"path":"https://darwin-eu-dev.github.io/omopgenerics/reference/emptyCodelistWithDetails.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Empty codelist object. — emptyCodelistWithDetails","text":"","code":"emptyCodelistWithDetails()"},{"path":"https://darwin-eu-dev.github.io/omopgenerics/reference/emptyCodelistWithDetails.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Empty codelist object. — emptyCodelistWithDetails","text":"empty codelist object.","code":""},{"path":"https://darwin-eu-dev.github.io/omopgenerics/reference/emptyCodelistWithDetails.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Empty codelist object. — emptyCodelistWithDetails","text":"","code":"emptyCodelistWithDetails() #>  #> ── 0 codelists with details ──────────────────────────────────────────────────── #>"},{"path":"https://darwin-eu-dev.github.io/omopgenerics/reference/emptyCohortTable.html","id":null,"dir":"Reference","previous_headings":"","what":"Create an empty cohort_table object — emptyCohortTable","title":"Create an empty cohort_table object — emptyCohortTable","text":"Create empty cohort_table object","code":""},{"path":"https://darwin-eu-dev.github.io/omopgenerics/reference/emptyCohortTable.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create an empty cohort_table object — emptyCohortTable","text":"","code":"emptyCohortTable(cdm, name, overwrite = TRUE)"},{"path":"https://darwin-eu-dev.github.io/omopgenerics/reference/emptyCohortTable.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create an empty cohort_table object — emptyCohortTable","text":"cdm cdm_reference create table. name Name table create. overwrite Whether overwrite existent table.","code":""},{"path":"https://darwin-eu-dev.github.io/omopgenerics/reference/emptyCohortTable.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create an empty cohort_table object — emptyCohortTable","text":"cdm_reference empty cohort table","code":""},{"path":"https://darwin-eu-dev.github.io/omopgenerics/reference/emptyCohortTable.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create an empty cohort_table object — emptyCohortTable","text":"","code":"library(omopgenerics) library(dplyr, warn.conflicts = FALSE)  person <- tibble(   person_id = 1, gender_concept_id = 0, year_of_birth = 1990,   race_concept_id = 0, ethnicity_concept_id = 0 ) observation_period <- tibble(   observation_period_id = 1, person_id = 1,   observation_period_start_date = as.Date(\"2000-01-01\"),   observation_period_end_date = as.Date(\"2023-12-31\"),   period_type_concept_id = 0 ) cdm <- cdmFromTables(   tables = list(\"person\" = person, \"observation_period\" = observation_period),   cdmName = \"test\" ) #> Warning: ! 5 column in person do not match expected column type: #> • `person_id` is numeric but expected integer #> • `gender_concept_id` is numeric but expected integer #> • `year_of_birth` is numeric but expected integer #> • `race_concept_id` is numeric but expected integer #> • `ethnicity_concept_id` is numeric but expected integer #> Warning: ! 3 column in observation_period do not match expected column type: #> • `observation_period_id` is numeric but expected integer #> • `person_id` is numeric but expected integer #> • `period_type_concept_id` is numeric but expected integer  cdm <- emptyCohortTable(cdm, \"my_empty_cohort\")  cdm #>  #> ── # OMOP CDM reference (local) of test ──────────────────────────────────────── #> • omop tables: person, observation_period #> • cohort tables: my_empty_cohort #> • achilles tables: - #> • other tables: - cdm$my_empty_cohort #> # A tibble: 0 × 4 #> # ℹ 4 variables: cohort_definition_id <int>, subject_id <int>, #> #   cohort_start_date <date>, cohort_end_date <date> settings(cdm$my_empty_cohort) #> # A tibble: 0 × 2 #> # ℹ 2 variables: cohort_definition_id <int>, cohort_name <chr> attrition(cdm$my_empty_cohort) #> # A tibble: 0 × 7 #> # ℹ 7 variables: cohort_definition_id <int>, number_records <int>, #> #   number_subjects <int>, reason_id <int>, reason <chr>, #> #   excluded_records <int>, excluded_subjects <int> cohortCount(cdm$my_empty_cohort) #> # A tibble: 0 × 3 #> # ℹ 3 variables: cohort_definition_id <int>, number_records <int>, #> #   number_subjects <int>"},{"path":"https://darwin-eu-dev.github.io/omopgenerics/reference/emptyOmopTable.html","id":null,"dir":"Reference","previous_headings":"","what":"Create an empty omop table — emptyOmopTable","title":"Create an empty omop table — emptyOmopTable","text":"Create empty omop table","code":""},{"path":"https://darwin-eu-dev.github.io/omopgenerics/reference/emptyOmopTable.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create an empty omop table — emptyOmopTable","text":"","code":"emptyOmopTable(cdm, name)"},{"path":"https://darwin-eu-dev.github.io/omopgenerics/reference/emptyOmopTable.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create an empty omop table — emptyOmopTable","text":"cdm cdm_reference create table. name Name table create.","code":""},{"path":"https://darwin-eu-dev.github.io/omopgenerics/reference/emptyOmopTable.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create an empty omop table — emptyOmopTable","text":"cdm_reference empty cohort table","code":""},{"path":"https://darwin-eu-dev.github.io/omopgenerics/reference/emptyOmopTable.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create an empty omop table — emptyOmopTable","text":"","code":"library(omopgenerics)  person <- dplyr::tibble(   person_id = 1, gender_concept_id = 0, year_of_birth = 1990,   race_concept_id = 0, ethnicity_concept_id = 0 ) observation_period <- dplyr::tibble(   observation_period_id = 1, person_id = 1,   observation_period_start_date = as.Date(\"2000-01-01\"),   observation_period_end_date = as.Date(\"2023-12-31\"),   period_type_concept_id = 0 ) cdm <- cdmFromTables(   tables = list(\"person\" = person, \"observation_period\" = observation_period),   cdmName = \"test\" ) #> Warning: ! 5 column in person do not match expected column type: #> • `person_id` is numeric but expected integer #> • `gender_concept_id` is numeric but expected integer #> • `year_of_birth` is numeric but expected integer #> • `race_concept_id` is numeric but expected integer #> • `ethnicity_concept_id` is numeric but expected integer #> Warning: ! 3 column in observation_period do not match expected column type: #> • `observation_period_id` is numeric but expected integer #> • `person_id` is numeric but expected integer #> • `period_type_concept_id` is numeric but expected integer  cdm <- emptyOmopTable(cdm, \"drug_exposure\")  cdm$drug_exposure #> # A tibble: 0 × 23 #> # ℹ 23 variables: drug_exposure_id <int>, person_id <int>, #> #   drug_concept_id <int>, drug_exposure_start_date <date>, #> #   drug_exposure_start_datetime <date>, drug_exposure_end_date <date>, #> #   drug_exposure_end_datetime <date>, verbatim_end_date <date>, #> #   drug_type_concept_id <int>, stop_reason <chr>, refills <int>, #> #   quantity <dbl>, days_supply <int>, sig <chr>, route_concept_id <int>, #> #   lot_number <chr>, provider_id <int>, visit_occurrence_id <int>, …"},{"path":"https://darwin-eu-dev.github.io/omopgenerics/reference/emptySummarisedResult.html","id":null,"dir":"Reference","previous_headings":"","what":"Empty summarised_result object. — emptySummarisedResult","title":"Empty summarised_result object. — emptySummarisedResult","text":"Empty summarised_result object.","code":""},{"path":"https://darwin-eu-dev.github.io/omopgenerics/reference/emptySummarisedResult.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Empty summarised_result object. — emptySummarisedResult","text":"","code":"emptySummarisedResult(settings = NULL)"},{"path":"https://darwin-eu-dev.github.io/omopgenerics/reference/emptySummarisedResult.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Empty summarised_result object. — emptySummarisedResult","text":"settings Tibble/data.frame settings empty summarised_result. contain least result_id column.","code":""},{"path":"https://darwin-eu-dev.github.io/omopgenerics/reference/emptySummarisedResult.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Empty summarised_result object. — emptySummarisedResult","text":"empty summarised_result object.","code":""},{"path":"https://darwin-eu-dev.github.io/omopgenerics/reference/emptySummarisedResult.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Empty summarised_result object. — emptySummarisedResult","text":"","code":"library(omopgenerics)  emptySummarisedResult() #> # A tibble: 0 × 13 #> # ℹ 13 variables: result_id <int>, cdm_name <chr>, group_name <chr>, #> #   group_level <chr>, strata_name <chr>, strata_level <chr>, #> #   variable_name <chr>, variable_level <chr>, estimate_name <chr>, #> #   estimate_type <chr>, estimate_value <chr>, additional_name <chr>, #> #   additional_level <chr>"},{"path":"https://darwin-eu-dev.github.io/omopgenerics/reference/estimateTypeChoices.html","id":null,"dir":"Reference","previous_headings":"","what":"Choices that can be present in estimate_type column. — estimateTypeChoices","title":"Choices that can be present in estimate_type column. — estimateTypeChoices","text":"Choices can present estimate_type column.","code":""},{"path":"https://darwin-eu-dev.github.io/omopgenerics/reference/estimateTypeChoices.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Choices that can be present in estimate_type column. — estimateTypeChoices","text":"","code":"estimateTypeChoices()"},{"path":"https://darwin-eu-dev.github.io/omopgenerics/reference/estimateTypeChoices.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Choices that can be present in estimate_type column. — estimateTypeChoices","text":"character vector options can present estimate_type column summarised_result objects.","code":""},{"path":"https://darwin-eu-dev.github.io/omopgenerics/reference/estimateTypeChoices.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Choices that can be present in estimate_type column. — estimateTypeChoices","text":"","code":"library(omopgenerics)  estimateTypeChoices() #> [1] \"numeric\"    \"integer\"    \"date\"       \"character\"  \"proportion\" #> [6] \"percentage\" \"logical\""},{"path":"https://darwin-eu-dev.github.io/omopgenerics/reference/exportCodelist.html","id":null,"dir":"Reference","previous_headings":"","what":"Export a codelist object. — exportCodelist","title":"Export a codelist object. — exportCodelist","text":"Export codelist object.","code":""},{"path":"https://darwin-eu-dev.github.io/omopgenerics/reference/exportCodelist.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Export a codelist object. — exportCodelist","text":"","code":"exportCodelist(x, path, type = \"json\")"},{"path":"https://darwin-eu-dev.github.io/omopgenerics/reference/exportCodelist.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Export a codelist object. — exportCodelist","text":"x codelist path Path files created. type Type files export. Currently \"json\" supported.","code":""},{"path":"https://darwin-eu-dev.github.io/omopgenerics/reference/exportCodelist.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Export a codelist object. — exportCodelist","text":"Files codelists","code":""},{"path":"https://darwin-eu-dev.github.io/omopgenerics/reference/exportConceptSetExpression.html","id":null,"dir":"Reference","previous_headings":"","what":"Export a concept set expression. — exportConceptSetExpression","title":"Export a concept set expression. — exportConceptSetExpression","text":"Export concept set expression.","code":""},{"path":"https://darwin-eu-dev.github.io/omopgenerics/reference/exportConceptSetExpression.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Export a concept set expression. — exportConceptSetExpression","text":"","code":"exportConceptSetExpression(x, path, type = \"json\")"},{"path":"https://darwin-eu-dev.github.io/omopgenerics/reference/exportConceptSetExpression.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Export a concept set expression. — exportConceptSetExpression","text":"x concept set expression path Path files created. type Type files export. Currently \"json\" supported.","code":""},{"path":"https://darwin-eu-dev.github.io/omopgenerics/reference/exportConceptSetExpression.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Export a concept set expression. — exportConceptSetExpression","text":"Files codelists","code":""},{"path":"https://darwin-eu-dev.github.io/omopgenerics/reference/exportSummarisedResult.html","id":null,"dir":"Reference","previous_headings":"","what":"Export a summarised_result object to a csv file. — exportSummarisedResult","title":"Export a summarised_result object to a csv file. — exportSummarisedResult","text":"Export summarised_result object csv file.","code":""},{"path":"https://darwin-eu-dev.github.io/omopgenerics/reference/exportSummarisedResult.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Export a summarised_result object to a csv file. — exportSummarisedResult","text":"","code":"exportSummarisedResult(   ...,   minCellCount = 5,   fileName = \"results_{cdm_name}_{date}.csv\",   path = getwd() )"},{"path":"https://darwin-eu-dev.github.io/omopgenerics/reference/exportSummarisedResult.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Export a summarised_result object to a csv file. — exportSummarisedResult","text":"... set summarised_result objects. minCellCount Minimum count suppression purposes. fileName Name file created. Use {cdm_name} refer cdmName objects {date} add export date. path Path create csv file.","code":""},{"path":"https://darwin-eu-dev.github.io/omopgenerics/reference/getCohortId.html","id":null,"dir":"Reference","previous_headings":"","what":"Get the cohort definition id of a certain name — getCohortId","title":"Get the cohort definition id of a certain name — getCohortId","text":"Get cohort definition id certain name","code":""},{"path":"https://darwin-eu-dev.github.io/omopgenerics/reference/getCohortId.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get the cohort definition id of a certain name — getCohortId","text":"","code":"getCohortId(cohort, cohortName = NULL)"},{"path":"https://darwin-eu-dev.github.io/omopgenerics/reference/getCohortId.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get the cohort definition id of a certain name — getCohortId","text":"cohort cohort_table object. cohortName Names cohort interest. NULL cohort names shown.","code":""},{"path":"https://darwin-eu-dev.github.io/omopgenerics/reference/getCohortId.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get the cohort definition id of a certain name — getCohortId","text":"Cohort definition ids","code":""},{"path":"https://darwin-eu-dev.github.io/omopgenerics/reference/getCohortName.html","id":null,"dir":"Reference","previous_headings":"","what":"Get the cohort name of a certain cohort definition id — getCohortName","title":"Get the cohort name of a certain cohort definition id — getCohortName","text":"Get cohort name certain cohort definition id","code":""},{"path":"https://darwin-eu-dev.github.io/omopgenerics/reference/getCohortName.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get the cohort name of a certain cohort definition id — getCohortName","text":"","code":"getCohortName(cohort, cohortId = NULL)"},{"path":"https://darwin-eu-dev.github.io/omopgenerics/reference/getCohortName.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get the cohort name of a certain cohort definition id — getCohortName","text":"cohort cohort_table object. cohortId Cohort definition id interest. NULL cohort ids shown.","code":""},{"path":"https://darwin-eu-dev.github.io/omopgenerics/reference/getCohortName.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get the cohort name of a certain cohort definition id — getCohortName","text":"Cohort names","code":""},{"path":"https://darwin-eu-dev.github.io/omopgenerics/reference/getPersonIdentifier.html","id":null,"dir":"Reference","previous_headings":"","what":"Get the column name with the person identifier from a table (either subject_id or person_id), it will throw an error if it contains both or neither. — getPersonIdentifier","title":"Get the column name with the person identifier from a table (either subject_id or person_id), it will throw an error if it contains both or neither. — getPersonIdentifier","text":"Get column name person identifier table (either subject_id person_id), throw error contains neither.","code":""},{"path":"https://darwin-eu-dev.github.io/omopgenerics/reference/getPersonIdentifier.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get the column name with the person identifier from a table (either subject_id or person_id), it will throw an error if it contains both or neither. — getPersonIdentifier","text":"","code":"getPersonIdentifier(x, call = parent.frame())"},{"path":"https://darwin-eu-dev.github.io/omopgenerics/reference/getPersonIdentifier.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get the column name with the person identifier from a table (either subject_id or person_id), it will throw an error if it contains both or neither. — getPersonIdentifier","text":"x table. call call argument passed cli functions.","code":""},{"path":"https://darwin-eu-dev.github.io/omopgenerics/reference/getPersonIdentifier.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get the column name with the person identifier from a table (either subject_id or person_id), it will throw an error if it contains both or neither. — getPersonIdentifier","text":"Person identifier column.","code":""},{"path":"https://darwin-eu-dev.github.io/omopgenerics/reference/importCodelist.html","id":null,"dir":"Reference","previous_headings":"","what":"Import a codelist. — importCodelist","title":"Import a codelist. — importCodelist","text":"Import codelist.","code":""},{"path":"https://darwin-eu-dev.github.io/omopgenerics/reference/importCodelist.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Import a codelist. — importCodelist","text":"","code":"importCodelist(path, type = \"json\")"},{"path":"https://darwin-eu-dev.github.io/omopgenerics/reference/importCodelist.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Import a codelist. — importCodelist","text":"path Path files created. type Type files export. Currently \"json\" supported.","code":""},{"path":"https://darwin-eu-dev.github.io/omopgenerics/reference/importCodelist.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Import a codelist. — importCodelist","text":"codelist","code":""},{"path":"https://darwin-eu-dev.github.io/omopgenerics/reference/importConceptSetExpression.html","id":null,"dir":"Reference","previous_headings":"","what":"Import a concept set expression. — importConceptSetExpression","title":"Import a concept set expression. — importConceptSetExpression","text":"Import concept set expression.","code":""},{"path":"https://darwin-eu-dev.github.io/omopgenerics/reference/importConceptSetExpression.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Import a concept set expression. — importConceptSetExpression","text":"","code":"importConceptSetExpression(path, type = \"json\")"},{"path":"https://darwin-eu-dev.github.io/omopgenerics/reference/importConceptSetExpression.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Import a concept set expression. — importConceptSetExpression","text":"path Path files created. type Type files export. Currently \"json\" supported.","code":""},{"path":"https://darwin-eu-dev.github.io/omopgenerics/reference/importConceptSetExpression.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Import a concept set expression. — importConceptSetExpression","text":"concept set expression","code":""},{"path":"https://darwin-eu-dev.github.io/omopgenerics/reference/importSummarisedResult.html","id":null,"dir":"Reference","previous_headings":"","what":"Import a set of summarised results. — importSummarisedResult","title":"Import a set of summarised results. — importSummarisedResult","text":"Import set summarised results.","code":""},{"path":"https://darwin-eu-dev.github.io/omopgenerics/reference/importSummarisedResult.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Import a set of summarised results. — importSummarisedResult","text":"","code":"importSummarisedResult(path, recursive = FALSE)"},{"path":"https://darwin-eu-dev.github.io/omopgenerics/reference/importSummarisedResult.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Import a set of summarised results. — importSummarisedResult","text":"path Path directory CSV files containing summarised results specific CSV file summarised result. recursive TRUE path directory, search files recurse directories","code":""},{"path":"https://darwin-eu-dev.github.io/omopgenerics/reference/importSummarisedResult.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Import a set of summarised results. — importSummarisedResult","text":"summarised result","code":""},{"path":[]},{"path":"https://darwin-eu-dev.github.io/omopgenerics/reference/insertFromSource.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convert a table that is not a cdm_table but have the same original source to a cdm_table. This Table is not meant to be used to insert tables in the cdm, please use insertTable instead. — insertFromSource","text":"","code":"insertFromSource(cdm, value)"},{"path":"https://darwin-eu-dev.github.io/omopgenerics/reference/insertFromSource.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convert a table that is not a cdm_table but have the same original source to a cdm_table. This Table is not meant to be used to insert tables in the cdm, please use insertTable instead. — insertFromSource","text":"cdm cdm_reference object. value table shares source cdm_reference object.","code":""},{"path":"https://darwin-eu-dev.github.io/omopgenerics/reference/insertFromSource.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Convert a table that is not a cdm_table but have the same original source to a cdm_table. This Table is not meant to be used to insert tables in the cdm, please use insertTable instead. — insertFromSource","text":"table cdm_reference environment","code":""},{"path":"https://darwin-eu-dev.github.io/omopgenerics/reference/insertTable.html","id":null,"dir":"Reference","previous_headings":"","what":"Insert a table to a cdm object. — insertTable","title":"Insert a table to a cdm object. — insertTable","text":"Insert table cdm object.","code":""},{"path":"https://darwin-eu-dev.github.io/omopgenerics/reference/insertTable.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Insert a table to a cdm object. — insertTable","text":"","code":"insertTable(cdm, name, table, overwrite = TRUE, temporary = FALSE)"},{"path":"https://darwin-eu-dev.github.io/omopgenerics/reference/insertTable.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Insert a table to a cdm object. — insertTable","text":"cdm cdm reference source cdm reference. name Name table insert. table Table insert cdm. overwrite Whether overwrite existent table. temporary Whether create temporary table.","code":""},{"path":"https://darwin-eu-dev.github.io/omopgenerics/reference/insertTable.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Insert a table to a cdm object. — insertTable","text":"cdm reference. library(omopgenerics) library(dplyr, warn.conflicts = FALSE) person <- tibble( person_id = 1, gender_concept_id = 0, year_of_birth = 1990, race_concept_id = 0, ethnicity_concept_id = 0 ) observation_period <- tibble( observation_period_id = 1, person_id = 1, observation_period_start_date = .Date(\"2000-01-01\"), observation_period_end_date = .Date(\"2023-12-31\"), period_type_concept_id = 0 ) cdm <- cdmFromTables( tables = list(\"person\" = person, \"observation_period\" = observation_period), cdmName = \"my_example_cdm\" ) x <- tibble(= 1) cdm <- insertTable(cdm = cdm, name = \"new_table\", table = x) cdm$new_table","code":""},{"path":"https://darwin-eu-dev.github.io/omopgenerics/reference/isTableEmpty.html","id":null,"dir":"Reference","previous_headings":"","what":"Check if a table is empty or not — isTableEmpty","title":"Check if a table is empty or not — isTableEmpty","text":"Check table empty ","code":""},{"path":"https://darwin-eu-dev.github.io/omopgenerics/reference/isTableEmpty.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check if a table is empty or not — isTableEmpty","text":"","code":"isTableEmpty(table)"},{"path":"https://darwin-eu-dev.github.io/omopgenerics/reference/isTableEmpty.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check if a table is empty or not — isTableEmpty","text":"table table","code":""},{"path":"https://darwin-eu-dev.github.io/omopgenerics/reference/isTableEmpty.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Check if a table is empty or not — isTableEmpty","text":"Boolean indicate cdm_table empty (TRUE FALSE).","code":""},{"path":"https://darwin-eu-dev.github.io/omopgenerics/reference/listSourceTables.html","id":null,"dir":"Reference","previous_headings":"","what":"List tables that can be accessed though a cdm object. — listSourceTables","title":"List tables that can be accessed though a cdm object. — listSourceTables","text":"List tables can accessed though cdm object.","code":""},{"path":"https://darwin-eu-dev.github.io/omopgenerics/reference/listSourceTables.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"List tables that can be accessed though a cdm object. — listSourceTables","text":"","code":"listSourceTables(cdm)"},{"path":"https://darwin-eu-dev.github.io/omopgenerics/reference/listSourceTables.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"List tables that can be accessed though a cdm object. — listSourceTables","text":"cdm cdm reference source cdm reference.","code":""},{"path":"https://darwin-eu-dev.github.io/omopgenerics/reference/listSourceTables.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"List tables that can be accessed though a cdm object. — listSourceTables","text":"character vector names tables.","code":""},{"path":"https://darwin-eu-dev.github.io/omopgenerics/reference/newAchillesTable.html","id":null,"dir":"Reference","previous_headings":"","what":"Create an achilles table from a cdm_table. — newAchillesTable","title":"Create an achilles table from a cdm_table. — newAchillesTable","text":"Create achilles table cdm_table.","code":""},{"path":"https://darwin-eu-dev.github.io/omopgenerics/reference/newAchillesTable.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create an achilles table from a cdm_table. — newAchillesTable","text":"","code":"newAchillesTable(table, version = \"5.3\", cast = FALSE)"},{"path":"https://darwin-eu-dev.github.io/omopgenerics/reference/newAchillesTable.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create an achilles table from a cdm_table. — newAchillesTable","text":"table cdm_table. version version cdm. cast Whether cast columns correct type.","code":""},{"path":"https://darwin-eu-dev.github.io/omopgenerics/reference/newAchillesTable.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create an achilles table from a cdm_table. — newAchillesTable","text":"achilles_table object","code":""},{"path":"https://darwin-eu-dev.github.io/omopgenerics/reference/newCdmReference.html","id":null,"dir":"Reference","previous_headings":"","what":"cdm_reference objects constructor — newCdmReference","title":"cdm_reference objects constructor — newCdmReference","text":"cdm_reference objects constructor","code":""},{"path":"https://darwin-eu-dev.github.io/omopgenerics/reference/newCdmReference.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"cdm_reference objects constructor — newCdmReference","text":"","code":"newCdmReference(tables, cdmName, cdmVersion = NULL, .softValidation = FALSE)"},{"path":"https://darwin-eu-dev.github.io/omopgenerics/reference/newCdmReference.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"cdm_reference objects constructor — newCdmReference","text":"tables List tables part OMOP Common Data Model reference. cdmName Name cdm object. cdmVersion Version cdm. Supported versions 5.3 5.4. .softValidation Whether perform soft validation consistency. set FALSE, non overlapping observation periods ensured.","code":""},{"path":"https://darwin-eu-dev.github.io/omopgenerics/reference/newCdmReference.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"cdm_reference objects constructor — newCdmReference","text":"cdm_reference object.","code":""},{"path":"https://darwin-eu-dev.github.io/omopgenerics/reference/newCdmReference.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"cdm_reference objects constructor — newCdmReference","text":"","code":"# \\donttest{ library(omopgenerics) library(dplyr, warn.conflicts = FALSE)  cdmTables <- list(   \"person\" = tibble(     person_id = 1, gender_concept_id = 0, year_of_birth = 1990,     race_concept_id = 0, ethnicity_concept_id = 0   ) |>     newCdmTable(newLocalSource(), \"person\"),   \"observation_period\" = tibble(     observation_period_id = 1, person_id = 1,     observation_period_start_date = as.Date(\"2000-01-01\"),     observation_period_end_date = as.Date(\"2023-12-31\"),     period_type_concept_id = 0   ) |>     newCdmTable(newLocalSource(), \"observation_period\") ) cdm <- newCdmReference(tables = cdmTables, cdmName = \"mock\") #> Warning: ! 5 column in person do not match expected column type: #> • `person_id` is numeric but expected integer #> • `gender_concept_id` is numeric but expected integer #> • `year_of_birth` is numeric but expected integer #> • `race_concept_id` is numeric but expected integer #> • `ethnicity_concept_id` is numeric but expected integer #> Warning: ! 3 column in observation_period do not match expected column type: #> • `observation_period_id` is numeric but expected integer #> • `person_id` is numeric but expected integer #> • `period_type_concept_id` is numeric but expected integer  cdm #>  #> ── # OMOP CDM reference (local) of mock ──────────────────────────────────────── #> • omop tables: person, observation_period #> • cohort tables: - #> • achilles tables: - #> • other tables: - # }"},{"path":"https://darwin-eu-dev.github.io/omopgenerics/reference/newCdmSource.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a cdm source object. — newCdmSource","title":"Create a cdm source object. — newCdmSource","text":"Create cdm source object.","code":""},{"path":"https://darwin-eu-dev.github.io/omopgenerics/reference/newCdmSource.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a cdm source object. — newCdmSource","text":"","code":"newCdmSource(src, sourceType)"},{"path":"https://darwin-eu-dev.github.io/omopgenerics/reference/newCdmSource.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a cdm source object. — newCdmSource","text":"src Source cdm object. sourceType Type source object.","code":""},{"path":"https://darwin-eu-dev.github.io/omopgenerics/reference/newCdmSource.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create a cdm source object. — newCdmSource","text":"validated cdm source object.","code":""},{"path":"https://darwin-eu-dev.github.io/omopgenerics/reference/newCdmTable.html","id":null,"dir":"Reference","previous_headings":"","what":"Create an cdm table. — newCdmTable","title":"Create an cdm table. — newCdmTable","text":"Create cdm table.","code":""},{"path":"https://darwin-eu-dev.github.io/omopgenerics/reference/newCdmTable.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create an cdm table. — newCdmTable","text":"","code":"newCdmTable(table, src, name)"},{"path":"https://darwin-eu-dev.github.io/omopgenerics/reference/newCdmTable.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create an cdm table. — newCdmTable","text":"table table part cdm. src source table. name name table.","code":""},{"path":"https://darwin-eu-dev.github.io/omopgenerics/reference/newCdmTable.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create an cdm table. — newCdmTable","text":"cdm_table object","code":""},{"path":"https://darwin-eu-dev.github.io/omopgenerics/reference/newCodelist.html","id":null,"dir":"Reference","previous_headings":"","what":"'codelist' object constructor — newCodelist","title":"'codelist' object constructor — newCodelist","text":"'codelist' object constructor","code":""},{"path":"https://darwin-eu-dev.github.io/omopgenerics/reference/newCodelist.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"'codelist' object constructor — newCodelist","text":"","code":"newCodelist(x)"},{"path":"https://darwin-eu-dev.github.io/omopgenerics/reference/newCodelist.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"'codelist' object constructor — newCodelist","text":"x named list element contains vector concept IDs.","code":""},{"path":"https://darwin-eu-dev.github.io/omopgenerics/reference/newCodelist.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"'codelist' object constructor — newCodelist","text":"codelist object.","code":""},{"path":"https://darwin-eu-dev.github.io/omopgenerics/reference/newCodelistWithDetails.html","id":null,"dir":"Reference","previous_headings":"","what":"'codelist' object constructor — newCodelistWithDetails","title":"'codelist' object constructor — newCodelistWithDetails","text":"'codelist' object constructor","code":""},{"path":"https://darwin-eu-dev.github.io/omopgenerics/reference/newCodelistWithDetails.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"'codelist' object constructor — newCodelistWithDetails","text":"","code":"newCodelistWithDetails(x)"},{"path":"https://darwin-eu-dev.github.io/omopgenerics/reference/newCodelistWithDetails.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"'codelist' object constructor — newCodelistWithDetails","text":"x named list element contains tibble column concept_id","code":""},{"path":"https://darwin-eu-dev.github.io/omopgenerics/reference/newCodelistWithDetails.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"'codelist' object constructor — newCodelistWithDetails","text":"codelist object.","code":""},{"path":"https://darwin-eu-dev.github.io/omopgenerics/reference/newCohortTable.html","id":null,"dir":"Reference","previous_headings":"","what":"cohort_table objects constructor. — newCohortTable","title":"cohort_table objects constructor. — newCohortTable","text":"cohort_table objects constructor.","code":""},{"path":"https://darwin-eu-dev.github.io/omopgenerics/reference/newCohortTable.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"cohort_table objects constructor. — newCohortTable","text":"","code":"newCohortTable(   table,   cohortSetRef = attr(table, \"cohort_set\"),   cohortAttritionRef = attr(table, \"cohort_attrition\"),   cohortCodelistRef = attr(table, \"cohort_codelist\"),   .softValidation = FALSE )"},{"path":"https://darwin-eu-dev.github.io/omopgenerics/reference/newCohortTable.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"cohort_table objects constructor. — newCohortTable","text":"table cdm_table object least: cohort_definition_id, subject_id, cohort_start_date, cohort_end_date. cohortSetRef Table least: cohort_definition_id, cohort_name cohortAttritionRef Table least: cohort_definition_id, number_subjects, number_records, reason_id, reason, excluded_subjects, excluded_records. cohortCodelistRef Table least: cohort_definition_id, codelist_name, concept_id. .softValidation Whether perform soft validation consistency. set FALSE four additional checks performed: 1) check cohort end date cohort start date,  2) check missing values required columns, 3) check cohort duration within observation period, 4) overlapping cohort entries","code":""},{"path":"https://darwin-eu-dev.github.io/omopgenerics/reference/newCohortTable.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"cohort_table objects constructor. — newCohortTable","text":"cohort_table object","code":""},{"path":"https://darwin-eu-dev.github.io/omopgenerics/reference/newCohortTable.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"cohort_table objects constructor. — newCohortTable","text":"","code":"person <- dplyr::tibble(   person_id = 1, gender_concept_id = 0, year_of_birth = 1990,   race_concept_id = 0, ethnicity_concept_id = 0 ) observation_period <- dplyr::tibble(   observation_period_id = 1, person_id = 1,   observation_period_start_date = as.Date(\"2000-01-01\"),   observation_period_end_date = as.Date(\"2023-12-31\"),   period_type_concept_id = 0 ) cohort1 <- dplyr::tibble(   cohort_definition_id = 1, subject_id = 1,   cohort_start_date = as.Date(\"2020-01-01\"),   cohort_end_date = as.Date(\"2020-01-10\") ) cdm <- cdmFromTables(   tables = list(     \"person\" = person,     \"observation_period\" = observation_period,     \"cohort1\" = cohort1   ),   cdmName = \"test\" ) #> Warning: ! 5 column in person do not match expected column type: #> • `person_id` is numeric but expected integer #> • `gender_concept_id` is numeric but expected integer #> • `year_of_birth` is numeric but expected integer #> • `race_concept_id` is numeric but expected integer #> • `ethnicity_concept_id` is numeric but expected integer #> Warning: ! 3 column in observation_period do not match expected column type: #> • `observation_period_id` is numeric but expected integer #> • `person_id` is numeric but expected integer #> • `period_type_concept_id` is numeric but expected integer cdm #>  #> ── # OMOP CDM reference (local) of test ──────────────────────────────────────── #> • omop tables: person, observation_period #> • cohort tables: - #> • achilles tables: - #> • other tables: cohort1 cdm$cohort1 <- newCohortTable(table = cdm$cohort1) #> Warning: ! 2 column in cohort1 do not match expected column type: #> • `cohort_definition_id` is numeric but expected integer #> • `subject_id` is numeric but expected integer cdm #>  #> ── # OMOP CDM reference (local) of test ──────────────────────────────────────── #> • omop tables: person, observation_period #> • cohort tables: cohort1 #> • achilles tables: - #> • other tables: - settings(cdm$cohort1) #> # A tibble: 1 × 2 #>   cohort_definition_id cohort_name #>                  <int> <chr>       #> 1                    1 cohort_1    attrition(cdm$cohort1) #> # A tibble: 1 × 7 #>   cohort_definition_id number_records number_subjects reason_id reason           #>                  <int>          <int>           <int>     <int> <chr>            #> 1                    1              1               1         1 Initial qualify… #> # ℹ 2 more variables: excluded_records <int>, excluded_subjects <int> cohortCount(cdm$cohort1) #> # A tibble: 1 × 3 #>   cohort_definition_id number_records number_subjects #>                  <int>          <int>           <int> #> 1                    1              1               1"},{"path":"https://darwin-eu-dev.github.io/omopgenerics/reference/newConceptSetExpression.html","id":null,"dir":"Reference","previous_headings":"","what":"'conceptSetExpression' object constructor — newConceptSetExpression","title":"'conceptSetExpression' object constructor — newConceptSetExpression","text":"'conceptSetExpression' object constructor","code":""},{"path":"https://darwin-eu-dev.github.io/omopgenerics/reference/newConceptSetExpression.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"'conceptSetExpression' object constructor — newConceptSetExpression","text":"","code":"newConceptSetExpression(x)"},{"path":"https://darwin-eu-dev.github.io/omopgenerics/reference/newConceptSetExpression.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"'conceptSetExpression' object constructor — newConceptSetExpression","text":"x named list tibbles, containing concept set definitions","code":""},{"path":"https://darwin-eu-dev.github.io/omopgenerics/reference/newConceptSetExpression.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"'conceptSetExpression' object constructor — newConceptSetExpression","text":"conceptSetExpression","code":""},{"path":"https://darwin-eu-dev.github.io/omopgenerics/reference/newLocalSource.html","id":null,"dir":"Reference","previous_headings":"","what":"A new local source for the cdm — newLocalSource","title":"A new local source for the cdm — newLocalSource","text":"new local source cdm","code":""},{"path":"https://darwin-eu-dev.github.io/omopgenerics/reference/newLocalSource.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"A new local source for the cdm — newLocalSource","text":"","code":"newLocalSource()"},{"path":"https://darwin-eu-dev.github.io/omopgenerics/reference/newLocalSource.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"A new local source for the cdm — newLocalSource","text":"list format cdm source","code":""},{"path":"https://darwin-eu-dev.github.io/omopgenerics/reference/newLocalSource.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"A new local source for the cdm — newLocalSource","text":"","code":"# \\donttest{ library(omopgenerics) newLocalSource() #> This is a local cdm source # }"},{"path":"https://darwin-eu-dev.github.io/omopgenerics/reference/newOmopTable.html","id":null,"dir":"Reference","previous_headings":"","what":"Create an omop table from a cdm table. — newOmopTable","title":"Create an omop table from a cdm table. — newOmopTable","text":"Create omop table cdm table.","code":""},{"path":"https://darwin-eu-dev.github.io/omopgenerics/reference/newOmopTable.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create an omop table from a cdm table. — newOmopTable","text":"","code":"newOmopTable(table, version = \"5.3\", cast = FALSE)"},{"path":"https://darwin-eu-dev.github.io/omopgenerics/reference/newOmopTable.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create an omop table from a cdm table. — newOmopTable","text":"table cdm_table. version version cdm. cast Whether cast columns correct type.","code":""},{"path":"https://darwin-eu-dev.github.io/omopgenerics/reference/newOmopTable.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create an omop table from a cdm table. — newOmopTable","text":"omop_table object","code":""},{"path":"https://darwin-eu-dev.github.io/omopgenerics/reference/newSummarisedResult.html","id":null,"dir":"Reference","previous_headings":"","what":"'summarised_results' object constructor — newSummarisedResult","title":"'summarised_results' object constructor — newSummarisedResult","text":"'summarised_results' object constructor","code":""},{"path":"https://darwin-eu-dev.github.io/omopgenerics/reference/newSummarisedResult.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"'summarised_results' object constructor — newSummarisedResult","text":"","code":"newSummarisedResult(x, settings = attr(x, \"settings\"))"},{"path":"https://darwin-eu-dev.github.io/omopgenerics/reference/newSummarisedResult.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"'summarised_results' object constructor — newSummarisedResult","text":"x Table. settings Settings summarised_result object.","code":""},{"path":"https://darwin-eu-dev.github.io/omopgenerics/reference/newSummarisedResult.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"'summarised_results' object constructor — newSummarisedResult","text":"summarised_result object","code":""},{"path":"https://darwin-eu-dev.github.io/omopgenerics/reference/newSummarisedResult.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"'summarised_results' object constructor — newSummarisedResult","text":"","code":"library(dplyr) library(omopgenerics)  x <- tibble(  \"result_id\" = 1L,  \"cdm_name\" = \"cprd\",  \"group_name\" = \"cohort_name\",  \"group_level\" = \"acetaminophen\",  \"strata_name\" = \"sex &&& age_group\",  \"strata_level\" = c(\"male &&& <40\", \"male &&& >=40\"),  \"variable_name\" = \"number_subjects\",  \"variable_level\" = NA_character_,  \"estimate_name\" = \"count\",  \"estimate_type\" = \"integer\",  \"estimate_value\" = c(\"5\", \"15\"),   \"additional_name\" = \"overall\",   \"additional_level\" = \"overall\" ) |>   newSummarisedResult() #> Warning: `result_type`, `package_name`, and `package_version` are not provided will be #> populated as \"\" in settings  x #> # A tibble: 2 × 13 #>   result_id cdm_name group_name  group_level   strata_name       strata_level  #>       <int> <chr>    <chr>       <chr>         <chr>             <chr>         #> 1         1 cprd     cohort_name acetaminophen sex &&& age_group male &&& <40  #> 2         1 cprd     cohort_name acetaminophen sex &&& age_group male &&& >=40 #> # ℹ 7 more variables: variable_name <chr>, variable_level <chr>, #> #   estimate_name <chr>, estimate_type <chr>, estimate_value <chr>, #> #   additional_name <chr>, additional_level <chr> settings(x) #> # A tibble: 1 × 4 #>   result_id result_type package_name package_version #>       <int> <chr>       <chr>        <chr>           #> 1         1 \"\"          \"\"           \"\"              summary(x) #> A summarised_result object with 2 rows, 1 different result_id, 1 different cdm #> names, and 3 settings. #> CDM names: cprd. #> Settings: result_type, package_name, and package_version.  x <- tibble(  \"result_id\" = 1L,  \"cdm_name\" = \"cprd\",  \"group_name\" = \"cohort_name\",  \"group_level\" = \"acetaminophen\",  \"strata_name\" = \"sex &&& age_group\",  \"strata_level\" = c(\"male &&& <40\", \"male &&& >=40\"),  \"variable_name\" = \"number_subjects\",  \"variable_level\" = NA_character_,  \"estimate_name\" = \"count\",  \"estimate_type\" = \"integer\",  \"estimate_value\" = c(\"5\", \"15\"),   \"additional_name\" = \"overall\",   \"additional_level\" = \"overall\" ) |>   newSummarisedResult(settings = tibble(     result_id = 1L, result_type = \"custom_summary\", mock = TRUE, value = 5   )) #> Warning: `package_name` and `package_version` are not provided will be populated as \"\" #> in settings  x #> # A tibble: 2 × 13 #>   result_id cdm_name group_name  group_level   strata_name       strata_level  #>       <int> <chr>    <chr>       <chr>         <chr>             <chr>         #> 1         1 cprd     cohort_name acetaminophen sex &&& age_group male &&& <40  #> 2         1 cprd     cohort_name acetaminophen sex &&& age_group male &&& >=40 #> # ℹ 7 more variables: variable_name <chr>, variable_level <chr>, #> #   estimate_name <chr>, estimate_type <chr>, estimate_value <chr>, #> #   additional_name <chr>, additional_level <chr> settings(x) #> # A tibble: 1 × 6 #>   result_id result_type    mock  value package_name package_version #>       <int> <chr>          <lgl> <dbl> <chr>        <chr>           #> 1         1 custom_summary TRUE      5 \"\"           \"\"              summary(x) #> A summarised_result object with 2 rows, 1 different result_id, 1 different cdm #> names, and 5 settings. #> CDM names: cprd. #> Settings: result_type, mock, value, package_name, and package_version."},{"path":"https://darwin-eu-dev.github.io/omopgenerics/reference/omopColumns.html","id":null,"dir":"Reference","previous_headings":"","what":"Required columns that the standard tables in the OMOP Common Data Model must have. — omopColumns","title":"Required columns that the standard tables in the OMOP Common Data Model must have. — omopColumns","text":"Required columns standard tables OMOP Common Data Model must .","code":""},{"path":"https://darwin-eu-dev.github.io/omopgenerics/reference/omopColumns.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Required columns that the standard tables in the OMOP Common Data Model must have. — omopColumns","text":"","code":"omopColumns(table, onlyRequired = TRUE, version = \"5.3\")"},{"path":"https://darwin-eu-dev.github.io/omopgenerics/reference/omopColumns.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Required columns that the standard tables in the OMOP Common Data Model must have. — omopColumns","text":"table Table see required columns. onlyRequired Whether include required fields. version Version OMOP Common Data Model.","code":""},{"path":"https://darwin-eu-dev.github.io/omopgenerics/reference/omopColumns.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Required columns that the standard tables in the OMOP Common Data Model must have. — omopColumns","text":"Character vector column names","code":""},{"path":"https://darwin-eu-dev.github.io/omopgenerics/reference/omopColumns.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Required columns that the standard tables in the OMOP Common Data Model must have. — omopColumns","text":"","code":"library(omopgenerics)  omopColumns(\"person\") #> [1] \"person_id\"            \"gender_concept_id\"    \"year_of_birth\"        #> [4] \"race_concept_id\"      \"ethnicity_concept_id\""},{"path":"https://darwin-eu-dev.github.io/omopgenerics/reference/omopTableFields.html","id":null,"dir":"Reference","previous_headings":"","what":"Return a table of omop cdm fields informations — omopTableFields","title":"Return a table of omop cdm fields informations — omopTableFields","text":"Return table omop cdm fields informations","code":""},{"path":"https://darwin-eu-dev.github.io/omopgenerics/reference/omopTableFields.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Return a table of omop cdm fields informations — omopTableFields","text":"","code":"omopTableFields(cdmVersion = \"5.3\")"},{"path":"https://darwin-eu-dev.github.io/omopgenerics/reference/omopTableFields.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Return a table of omop cdm fields informations — omopTableFields","text":"cdmVersion cdm version omop cdm.","code":""},{"path":"https://darwin-eu-dev.github.io/omopgenerics/reference/omopTableFields.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Return a table of omop cdm fields informations — omopTableFields","text":"tibble contain informations different fields omop cdm.","code":""},{"path":"https://darwin-eu-dev.github.io/omopgenerics/reference/omopTables.html","id":null,"dir":"Reference","previous_headings":"","what":"Standard tables that a cdm reference can contain in the OMOP Common Data Model. — omopTables","title":"Standard tables that a cdm reference can contain in the OMOP Common Data Model. — omopTables","text":"Standard tables cdm reference can contain OMOP Common Data Model.","code":""},{"path":"https://darwin-eu-dev.github.io/omopgenerics/reference/omopTables.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Standard tables that a cdm reference can contain in the OMOP Common Data Model. — omopTables","text":"","code":"omopTables(version = \"5.3\")"},{"path":"https://darwin-eu-dev.github.io/omopgenerics/reference/omopTables.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Standard tables that a cdm reference can contain in the OMOP Common Data Model. — omopTables","text":"version Version OMOP Common Data Model.","code":""},{"path":"https://darwin-eu-dev.github.io/omopgenerics/reference/omopTables.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Standard tables that a cdm reference can contain in the OMOP Common Data Model. — omopTables","text":"Standard tables","code":""},{"path":"https://darwin-eu-dev.github.io/omopgenerics/reference/omopTables.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Standard tables that a cdm reference can contain in the OMOP Common Data Model. — omopTables","text":"","code":"library(omopgenerics)  omopTables() #>  [1] \"person\"                \"observation_period\"    \"visit_occurrence\"      #>  [4] \"visit_detail\"          \"condition_occurrence\"  \"drug_exposure\"         #>  [7] \"procedure_occurrence\"  \"device_exposure\"       \"measurement\"           #> [10] \"observation\"           \"death\"                 \"note\"                  #> [13] \"note_nlp\"              \"specimen\"              \"fact_relationship\"     #> [16] \"location\"              \"care_site\"             \"provider\"              #> [19] \"payer_plan_period\"     \"cost\"                  \"drug_era\"              #> [22] \"dose_era\"              \"condition_era\"         \"metadata\"              #> [25] \"cdm_source\"            \"concept\"               \"vocabulary\"            #> [28] \"domain\"                \"concept_class\"         \"concept_relationship\"  #> [31] \"relationship\"          \"concept_synonym\"       \"concept_ancestor\"      #> [34] \"source_to_concept_map\" \"drug_strength\"         \"cohort_definition\"     #> [37] \"attribute_definition\"  \"concept_recommended\""},{"path":"https://darwin-eu-dev.github.io/omopgenerics/reference/omopgenerics-package.html","id":null,"dir":"Reference","previous_headings":"","what":"omopgenerics: Methods and Classes for the OMOP Common Data Model — omopgenerics-package","title":"omopgenerics: Methods and Classes for the OMOP Common Data Model — omopgenerics-package","text":"Provides definitions core classes methods used analytic pipelines query OMOP (Observational Medical Outcomes Partnership) common data model.","code":""},{"path":[]},{"path":"https://darwin-eu-dev.github.io/omopgenerics/reference/omopgenerics-package.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"omopgenerics: Methods and Classes for the OMOP Common Data Model — omopgenerics-package","text":"Maintainer: Martí Català marti.catalasabate@ndorms.ox.ac.uk (ORCID) Authors: Edward Burn edward.burn@ndorms.ox.ac.uk (ORCID) contributors: Mike Du mike.du@ndorms.ox.ac.uk (ORCID) [contributor] Yuchen Guo yuchen.guo@ndorms.ox.ac.uk (ORCID) [contributor] Adam Black black@ohdsi.org (ORCID) [contributor] Marta Alcalde-Herraiz marta.alcaldeherraiz@ndorms.ox.ac.uk (ORCID) [contributor]","code":""},{"path":"https://darwin-eu-dev.github.io/omopgenerics/reference/participants.html","id":null,"dir":"Reference","previous_headings":"","what":"It returns the participants that contributed to a particular analysis — participants","title":"It returns the participants that contributed to a particular analysis — participants","text":"returns participants contributed particular analysis","code":""},{"path":"https://darwin-eu-dev.github.io/omopgenerics/reference/participants.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"It returns the participants that contributed to a particular analysis — participants","text":"","code":"participants(result, ...)"},{"path":"https://darwin-eu-dev.github.io/omopgenerics/reference/participants.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"It returns the participants that contributed to a particular analysis — participants","text":"result result object. ... ...","code":""},{"path":"https://darwin-eu-dev.github.io/omopgenerics/reference/participants.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"It returns the participants that contributed to a particular analysis — participants","text":"Table participants","code":""},{"path":"https://darwin-eu-dev.github.io/omopgenerics/reference/print.cdm_reference.html","id":null,"dir":"Reference","previous_headings":"","what":"Print a CDM reference object — print.cdm_reference","title":"Print a CDM reference object — print.cdm_reference","text":"Print CDM reference object","code":""},{"path":"https://darwin-eu-dev.github.io/omopgenerics/reference/print.cdm_reference.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Print a CDM reference object — print.cdm_reference","text":"","code":"# S3 method for class 'cdm_reference' print(x, ...)"},{"path":"https://darwin-eu-dev.github.io/omopgenerics/reference/print.cdm_reference.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Print a CDM reference object — print.cdm_reference","text":"x cdm_reference object ... Included compatibility generic. used.","code":""},{"path":"https://darwin-eu-dev.github.io/omopgenerics/reference/print.cdm_reference.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Print a CDM reference object — print.cdm_reference","text":"Invisibly returns input","code":""},{"path":"https://darwin-eu-dev.github.io/omopgenerics/reference/print.cdm_reference.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Print a CDM reference object — print.cdm_reference","text":"","code":"# \\donttest{ library(omopgenerics)  cdm <- cdmFromTables(   tables = list(     \"person\" = dplyr::tibble(       person_id = c(1, 2, 3), gender_concept_id = 0, year_of_birth = 1990,       race_concept_id = 0, ethnicity_concept_id = 0     ),     \"observation_period\" = dplyr::tibble(       observation_period_id = 1:3, person_id = 1:3,       observation_period_start_date = as.Date(\"2000-01-01\"),       observation_period_end_date = as.Date(\"2023-12-31\"),       period_type_concept_id = 0     )   ),   cdmName = \"mock\" ) #> Warning: ! 5 column in person do not match expected column type: #> • `person_id` is numeric but expected integer #> • `gender_concept_id` is numeric but expected integer #> • `year_of_birth` is numeric but expected integer #> • `race_concept_id` is numeric but expected integer #> • `ethnicity_concept_id` is numeric but expected integer #> Warning: ! 1 column in observation_period do not match expected column type: #> • `period_type_concept_id` is numeric but expected integer  print(cdm) #>  #> ── # OMOP CDM reference (local) of mock ──────────────────────────────────────── #> • omop tables: person, observation_period #> • cohort tables: - #> • achilles tables: - #> • other tables: - # }"},{"path":"https://darwin-eu-dev.github.io/omopgenerics/reference/print.codelist.html","id":null,"dir":"Reference","previous_headings":"","what":"Print a codelist — print.codelist","title":"Print a codelist — print.codelist","text":"Print codelist","code":""},{"path":"https://darwin-eu-dev.github.io/omopgenerics/reference/print.codelist.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Print a codelist — print.codelist","text":"","code":"# S3 method for class 'codelist' print(x, ...)"},{"path":"https://darwin-eu-dev.github.io/omopgenerics/reference/print.codelist.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Print a codelist — print.codelist","text":"x codelist ... Included compatibility generic. used.","code":""},{"path":"https://darwin-eu-dev.github.io/omopgenerics/reference/print.codelist.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Print a codelist — print.codelist","text":"Invisibly returns input","code":""},{"path":"https://darwin-eu-dev.github.io/omopgenerics/reference/print.codelist.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Print a codelist — print.codelist","text":"","code":"codes <- list(\"disease X\" = c(1, 2, 3), \"disease Y\" = c(4, 5)) codes <- newCodelist(codes) #> Warning: ! `codelist` contains numeric values, they are casted to integers. print(codes) #>  #> ── 2 codelists ───────────────────────────────────────────────────────────────── #>  #> - disease X (3 codes) #> - disease Y (2 codes)"},{"path":"https://darwin-eu-dev.github.io/omopgenerics/reference/print.codelist_with_details.html","id":null,"dir":"Reference","previous_headings":"","what":"Print a codelist with details — print.codelist_with_details","title":"Print a codelist with details — print.codelist_with_details","text":"Print codelist details","code":""},{"path":"https://darwin-eu-dev.github.io/omopgenerics/reference/print.codelist_with_details.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Print a codelist with details — print.codelist_with_details","text":"","code":"# S3 method for class 'codelist_with_details' print(x, ...)"},{"path":"https://darwin-eu-dev.github.io/omopgenerics/reference/print.codelist_with_details.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Print a codelist with details — print.codelist_with_details","text":"x codelist details ... Included compatibility generic. used.","code":""},{"path":"https://darwin-eu-dev.github.io/omopgenerics/reference/print.codelist_with_details.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Print a codelist with details — print.codelist_with_details","text":"Invisibly returns input","code":""},{"path":"https://darwin-eu-dev.github.io/omopgenerics/reference/print.codelist_with_details.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Print a codelist with details — print.codelist_with_details","text":"","code":"codes <- list(\"disease X\" = dplyr::tibble(concept_id = c(1, 2, 3),                                           other= c(\"a\", \"b\", \"c\"))) codes <- newCodelistWithDetails(codes) print(codes) #>  #> ── 1 codelist with details ───────────────────────────────────────────────────── #>  #> - disease X (3 codes)"},{"path":"https://darwin-eu-dev.github.io/omopgenerics/reference/print.conceptSetExpression.html","id":null,"dir":"Reference","previous_headings":"","what":"Print a concept set expression — print.conceptSetExpression","title":"Print a concept set expression — print.conceptSetExpression","text":"Print concept set expression","code":""},{"path":"https://darwin-eu-dev.github.io/omopgenerics/reference/print.conceptSetExpression.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Print a concept set expression — print.conceptSetExpression","text":"","code":"# S3 method for class 'conceptSetExpression' print(x, ...)"},{"path":"https://darwin-eu-dev.github.io/omopgenerics/reference/print.conceptSetExpression.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Print a concept set expression — print.conceptSetExpression","text":"x concept set expression ... Included compatibility generic. used.","code":""},{"path":"https://darwin-eu-dev.github.io/omopgenerics/reference/print.conceptSetExpression.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Print a concept set expression — print.conceptSetExpression","text":"Invisibly returns input","code":""},{"path":"https://darwin-eu-dev.github.io/omopgenerics/reference/print.conceptSetExpression.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Print a concept set expression — print.conceptSetExpression","text":"","code":"asthma_cs <- list(\"asthma_narrow\" = dplyr::tibble(   \"concept_id\" = 1,   \"excluded\" = FALSE,   \"descendants\" = TRUE,   \"mapped\" = FALSE ), \"asthma_broad\" = dplyr::tibble(   \"concept_id\" = c(1,2),   \"excluded\" = FALSE,   \"descendants\" = TRUE,   \"mapped\" = FALSE )) asthma_cs <- newConceptSetExpression(asthma_cs) print(asthma_cs) #>  #> ── 2 conceptSetExpressions ───────────────────────────────────────────────────── #>  #> - asthma_broad (2 concept criteria) #> - asthma_narrow (1 concept criteria)"},{"path":"https://darwin-eu-dev.github.io/omopgenerics/reference/readSourceTable.html","id":null,"dir":"Reference","previous_headings":"","what":"Read a table from the cdm_source and add it to to the cdm. — readSourceTable","title":"Read a table from the cdm_source and add it to to the cdm. — readSourceTable","text":"Read table cdm_source add cdm.","code":""},{"path":"https://darwin-eu-dev.github.io/omopgenerics/reference/readSourceTable.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Read a table from the cdm_source and add it to to the cdm. — readSourceTable","text":"","code":"readSourceTable(cdm, name)"},{"path":"https://darwin-eu-dev.github.io/omopgenerics/reference/readSourceTable.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Read a table from the cdm_source and add it to to the cdm. — readSourceTable","text":"cdm cdm reference. name Name table read cdm_source space.","code":""},{"path":"https://darwin-eu-dev.github.io/omopgenerics/reference/readSourceTable.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Read a table from the cdm_source and add it to to the cdm. — readSourceTable","text":"cdm_reference new table.","code":""},{"path":"https://darwin-eu-dev.github.io/omopgenerics/reference/recordCohortAttrition.html","id":null,"dir":"Reference","previous_headings":"","what":"Update cohort attrition. — recordCohortAttrition","title":"Update cohort attrition. — recordCohortAttrition","text":"Update cohort attrition.","code":""},{"path":"https://darwin-eu-dev.github.io/omopgenerics/reference/recordCohortAttrition.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Update cohort attrition. — recordCohortAttrition","text":"","code":"recordCohortAttrition(cohort, reason, cohortId = NULL)"},{"path":"https://darwin-eu-dev.github.io/omopgenerics/reference/recordCohortAttrition.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Update cohort attrition. — recordCohortAttrition","text":"cohort cohort_table object. reason character string. cohortId Cohort definition id cohort update attrition. NULL cohort_definition_id updated.","code":""},{"path":"https://darwin-eu-dev.github.io/omopgenerics/reference/recordCohortAttrition.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Update cohort attrition. — recordCohortAttrition","text":"cohort_table updated attrition.","code":""},{"path":"https://darwin-eu-dev.github.io/omopgenerics/reference/recordCohortAttrition.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Update cohort attrition. — recordCohortAttrition","text":"","code":"library(omopgenerics) library(dplyr, warn.conflicts = FALSE)  person <- tibble(   person_id = 1, gender_concept_id = 0, year_of_birth = 1990,   race_concept_id = 0, ethnicity_concept_id = 0 ) observation_period <- tibble(   observation_period_id = 1, person_id = 1,   observation_period_start_date = as.Date(\"2000-01-01\"),   observation_period_end_date = as.Date(\"2023-12-31\"),   period_type_concept_id = 0 ) cohort <- tibble(   cohort_definition_id = c(1, 1, 1, 2),   subject_id = 1,   cohort_start_date = as.Date(c(\"2020-01-01\", \"2021-01-01\", \"2022-01-01\", \"2022-01-01\")),   cohort_end_date = as.Date(c(\"2020-01-01\", \"2021-01-01\", \"2022-01-01\", \"2022-01-01\")), ) cdm <- cdmFromTables(   tables = list(\"person\" = person, \"observation_period\" = observation_period),   cdmName = \"my_example_cdm\",   cohortTables = list(\"cohort1\" = cohort) ) #> Warning: ! 5 column in person do not match expected column type: #> • `person_id` is numeric but expected integer #> • `gender_concept_id` is numeric but expected integer #> • `year_of_birth` is numeric but expected integer #> • `race_concept_id` is numeric but expected integer #> • `ethnicity_concept_id` is numeric but expected integer #> Warning: ! 3 column in observation_period do not match expected column type: #> • `observation_period_id` is numeric but expected integer #> • `person_id` is numeric but expected integer #> • `period_type_concept_id` is numeric but expected integer #> Warning: ! 2 column in cohort1 do not match expected column type: #> • `cohort_definition_id` is numeric but expected integer #> • `subject_id` is numeric but expected integer  cdm$cohort1 #> # A tibble: 4 × 4 #>   cohort_definition_id subject_id cohort_start_date cohort_end_date #>                  <dbl>      <dbl> <date>            <date>          #> 1                    1          1 2020-01-01        2020-01-01      #> 2                    1          1 2021-01-01        2021-01-01      #> 3                    1          1 2022-01-01        2022-01-01      #> 4                    2          1 2022-01-01        2022-01-01      attrition(cdm$cohort1) #> # A tibble: 2 × 7 #>   cohort_definition_id number_records number_subjects reason_id reason           #>                  <int>          <int>           <int>     <int> <chr>            #> 1                    1              3               1         1 Initial qualify… #> 2                    2              1               1         1 Initial qualify… #> # ℹ 2 more variables: excluded_records <int>, excluded_subjects <int>  cdm$cohort1 <- cdm$cohort1 |>   group_by(cohort_definition_id, subject_id) |>   filter(cohort_start_date == min(cohort_start_date)) |>   ungroup() |>   compute(name = \"cohort1\", temporary = FALSE) |>   recordCohortAttrition(\"Restrict to first observation\") #> Warning: ! 1 casted column in cohort1 (cohort_attrition) as do not match expected column #>   type: #> • `cohort_definition_id` from numeric to integer #> Warning: ! 2 column in cohort1 do not match expected column type: #> • `cohort_definition_id` is numeric but expected integer #> • `subject_id` is numeric but expected integer  cdm$cohort1 #> # A tibble: 2 × 4 #>   cohort_definition_id subject_id cohort_start_date cohort_end_date #> *                <dbl>      <dbl> <date>            <date>          #> 1                    1          1 2020-01-01        2020-01-01      #> 2                    2          1 2022-01-01        2022-01-01      attrition(cdm$cohort1) #> # A tibble: 4 × 7 #>   cohort_definition_id number_records number_subjects reason_id reason           #>                  <int>          <int>           <int>     <int> <chr>            #> 1                    1              3               1         1 Initial qualify… #> 2                    1              1               1         2 Restrict to fir… #> 3                    2              1               1         1 Initial qualify… #> 4                    2              1               1         2 Restrict to fir… #> # ℹ 2 more variables: excluded_records <int>, excluded_subjects <int>"},{"path":"https://darwin-eu-dev.github.io/omopgenerics/reference/reexports.html","id":null,"dir":"Reference","previous_headings":"","what":"Objects exported from other packages — reexports","title":"Objects exported from other packages — reexports","text":"objects imported packages. Follow links see documentation. dplyr filter","code":""},{"path":"https://darwin-eu-dev.github.io/omopgenerics/reference/resultColumns.html","id":null,"dir":"Reference","previous_headings":"","what":"Required columns that the result tables must have. — resultColumns","title":"Required columns that the result tables must have. — resultColumns","text":"Required columns result tables must .","code":""},{"path":"https://darwin-eu-dev.github.io/omopgenerics/reference/resultColumns.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Required columns that the result tables must have. — resultColumns","text":"","code":"resultColumns(table = \"summarised_result\")"},{"path":"https://darwin-eu-dev.github.io/omopgenerics/reference/resultColumns.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Required columns that the result tables must have. — resultColumns","text":"table Table see required columns.","code":""},{"path":"https://darwin-eu-dev.github.io/omopgenerics/reference/resultColumns.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Required columns that the result tables must have. — resultColumns","text":"Required columns","code":""},{"path":"https://darwin-eu-dev.github.io/omopgenerics/reference/resultColumns.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Required columns that the result tables must have. — resultColumns","text":"","code":"library(omopgenerics)  resultColumns() #>  [1] \"result_id\"        \"cdm_name\"         \"group_name\"       \"group_level\"      #>  [5] \"strata_name\"      \"strata_level\"     \"variable_name\"    \"variable_level\"   #>  [9] \"estimate_name\"    \"estimate_type\"    \"estimate_value\"   \"additional_name\"  #> [13] \"additional_level\""},{"path":"https://darwin-eu-dev.github.io/omopgenerics/reference/settings.cohort_table.html","id":null,"dir":"Reference","previous_headings":"","what":"Get cohort settings from a cohort_table object. — settings.cohort_table","title":"Get cohort settings from a cohort_table object. — settings.cohort_table","text":"Get cohort settings cohort_table object.","code":""},{"path":"https://darwin-eu-dev.github.io/omopgenerics/reference/settings.cohort_table.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get cohort settings from a cohort_table object. — settings.cohort_table","text":"","code":"# S3 method for class 'cohort_table' settings(x)"},{"path":"https://darwin-eu-dev.github.io/omopgenerics/reference/settings.cohort_table.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get cohort settings from a cohort_table object. — settings.cohort_table","text":"x cohort_table object.","code":""},{"path":"https://darwin-eu-dev.github.io/omopgenerics/reference/settings.cohort_table.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get cohort settings from a cohort_table object. — settings.cohort_table","text":"table details cohort settings.","code":""},{"path":"https://darwin-eu-dev.github.io/omopgenerics/reference/settings.cohort_table.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get cohort settings from a cohort_table object. — settings.cohort_table","text":"","code":"library(omopgenerics) library(dplyr, warn.conflicts = FALSE)  person <- tibble(   person_id = 1, gender_concept_id = 0, year_of_birth = 1990,   race_concept_id = 0, ethnicity_concept_id = 0 ) observation_period <- tibble(   observation_period_id = 1, person_id = 1,   observation_period_start_date = as.Date(\"2000-01-01\"),   observation_period_end_date = as.Date(\"2023-12-31\"),   period_type_concept_id = 0 ) cohort <- tibble(   cohort_definition_id = 1,   subject_id = 1,   cohort_start_date = as.Date(\"2010-01-01\"),   cohort_end_date = as.Date(\"2012-01-01\") ) cdm <- cdmFromTables(   tables = list(\"person\" = person, \"observation_period\" = observation_period),   cdmName = \"test\",   cohortTables = list(\"my_cohort\" = cohort) ) #> Warning: ! 5 column in person do not match expected column type: #> • `person_id` is numeric but expected integer #> • `gender_concept_id` is numeric but expected integer #> • `year_of_birth` is numeric but expected integer #> • `race_concept_id` is numeric but expected integer #> • `ethnicity_concept_id` is numeric but expected integer #> Warning: ! 3 column in observation_period do not match expected column type: #> • `observation_period_id` is numeric but expected integer #> • `person_id` is numeric but expected integer #> • `period_type_concept_id` is numeric but expected integer #> Warning: ! 2 column in my_cohort do not match expected column type: #> • `cohort_definition_id` is numeric but expected integer #> • `subject_id` is numeric but expected integer  settings(cdm$my_cohort) #> # A tibble: 1 × 2 #>   cohort_definition_id cohort_name #>                  <int> <chr>       #> 1                    1 cohort_1     cdm$my_cohort <- cdm$my_cohort |>   newCohortTable(cohortSetRef = tibble(     cohort_definition_id = 1, cohort_name = \"new_name\"   )) #> Warning: ! 1 casted column in my_cohort (cohort_set) as do not match expected column #>   type: #> • `cohort_definition_id` from numeric to integer #> Warning: ! 2 column in my_cohort do not match expected column type: #> • `cohort_definition_id` is numeric but expected integer #> • `subject_id` is numeric but expected integer  settings(cdm$my_cohort) #> # A tibble: 1 × 2 #>   cohort_definition_id cohort_name #>                  <int> <chr>       #> 1                    1 new_name"},{"path":"https://darwin-eu-dev.github.io/omopgenerics/reference/settings.html","id":null,"dir":"Reference","previous_headings":"","what":"Get settings from an object. — settings","title":"Get settings from an object. — settings","text":"Get settings object.","code":""},{"path":"https://darwin-eu-dev.github.io/omopgenerics/reference/settings.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get settings from an object. — settings","text":"","code":"settings(x)"},{"path":"https://darwin-eu-dev.github.io/omopgenerics/reference/settings.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get settings from an object. — settings","text":"x Object","code":""},{"path":"https://darwin-eu-dev.github.io/omopgenerics/reference/settings.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get settings from an object. — settings","text":"table settings object.","code":""},{"path":"https://darwin-eu-dev.github.io/omopgenerics/reference/settings.summarised_result.html","id":null,"dir":"Reference","previous_headings":"","what":"Get settings from a summarised_result object. — settings.summarised_result","title":"Get settings from a summarised_result object. — settings.summarised_result","text":"Get settings summarised_result object.","code":""},{"path":"https://darwin-eu-dev.github.io/omopgenerics/reference/settings.summarised_result.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get settings from a summarised_result object. — settings.summarised_result","text":"","code":"# S3 method for class 'summarised_result' settings(x)"},{"path":"https://darwin-eu-dev.github.io/omopgenerics/reference/settings.summarised_result.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get settings from a summarised_result object. — settings.summarised_result","text":"x summarised_result object.","code":""},{"path":"https://darwin-eu-dev.github.io/omopgenerics/reference/settings.summarised_result.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get settings from a summarised_result object. — settings.summarised_result","text":"table settings.","code":""},{"path":"https://darwin-eu-dev.github.io/omopgenerics/reference/settings.summarised_result.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get settings from a summarised_result object. — settings.summarised_result","text":"","code":"library(omopgenerics) library(dplyr, warn.conflicts = FALSE)  person <- tibble(   person_id = 1, gender_concept_id = 0, year_of_birth = 1990,   race_concept_id = 0, ethnicity_concept_id = 0 ) observation_period <- tibble(   observation_period_id = 1, person_id = 1,   observation_period_start_date = as.Date(\"2000-01-01\"),   observation_period_end_date = as.Date(\"2023-12-31\"),   period_type_concept_id = 0 ) cohort <- tibble(   cohort_definition_id = 1,   subject_id = 1,   cohort_start_date = as.Date(\"2010-01-01\"),   cohort_end_date = as.Date(\"2012-01-01\") ) cdm <- cdmFromTables(   tables = list(\"person\" = person, \"observation_period\" = observation_period),   cdmName = \"test\",   cohortTables = list(\"my_cohort\" = cohort) ) #> Warning: ! 5 column in person do not match expected column type: #> • `person_id` is numeric but expected integer #> • `gender_concept_id` is numeric but expected integer #> • `year_of_birth` is numeric but expected integer #> • `race_concept_id` is numeric but expected integer #> • `ethnicity_concept_id` is numeric but expected integer #> Warning: ! 3 column in observation_period do not match expected column type: #> • `observation_period_id` is numeric but expected integer #> • `person_id` is numeric but expected integer #> • `period_type_concept_id` is numeric but expected integer #> Warning: ! 2 column in my_cohort do not match expected column type: #> • `cohort_definition_id` is numeric but expected integer #> • `subject_id` is numeric but expected integer  result <- summary(cdm$my_cohort)  settings(result) #> # A tibble: 2 × 7 #>   result_id cohort_definition_id cohort_name table_name result_type package_name #>       <int>                <int> <chr>       <chr>      <chr>       <chr>        #> 1         1                    1 cohort_1    my_cohort  cohort_cou… omopgenerics #> 2         2                    1 cohort_1    my_cohort  cohort_att… omopgenerics #> # ℹ 1 more variable: package_version <chr>"},{"path":"https://darwin-eu-dev.github.io/omopgenerics/reference/sourceType.html","id":null,"dir":"Reference","previous_headings":"","what":"Get the source type of an object. — sourceType","title":"Get the source type of an object. — sourceType","text":"Get source type object.","code":""},{"path":"https://darwin-eu-dev.github.io/omopgenerics/reference/sourceType.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get the source type of an object. — sourceType","text":"","code":"sourceType(x)"},{"path":"https://darwin-eu-dev.github.io/omopgenerics/reference/sourceType.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get the source type of an object. — sourceType","text":"x Object know source type.","code":""},{"path":"https://darwin-eu-dev.github.io/omopgenerics/reference/sourceType.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get the source type of an object. — sourceType","text":"character vector defines type cdm_source.","code":""},{"path":"https://darwin-eu-dev.github.io/omopgenerics/reference/sub-sub-.cdm_reference.html","id":null,"dir":"Reference","previous_headings":"","what":"Subset a cdm reference object. — [[.cdm_reference","title":"Subset a cdm reference object. — [[.cdm_reference","text":"Subset cdm reference object.","code":""},{"path":"https://darwin-eu-dev.github.io/omopgenerics/reference/sub-sub-.cdm_reference.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Subset a cdm reference object. — [[.cdm_reference","text":"","code":"# S3 method for class 'cdm_reference' x[[name]]"},{"path":"https://darwin-eu-dev.github.io/omopgenerics/reference/sub-sub-.cdm_reference.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Subset a cdm reference object. — [[.cdm_reference","text":"x cdm reference name name index table extract cdm object.","code":""},{"path":"https://darwin-eu-dev.github.io/omopgenerics/reference/sub-sub-.cdm_reference.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Subset a cdm reference object. — [[.cdm_reference","text":"single cdm table reference","code":""},{"path":"https://darwin-eu-dev.github.io/omopgenerics/reference/sub-sub-.cdm_reference.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Subset a cdm reference object. — [[.cdm_reference","text":"","code":"# \\donttest{ library(omopgenerics) library(dplyr, warn.conflicts = FALSE)  cdm <- cdmFromTables(   tables = list(     \"person\" = tibble(       person_id = c(1, 2, 3), gender_concept_id = 0, year_of_birth = 1990,       race_concept_id = 0, ethnicity_concept_id = 0     ),     \"observation_period\" = tibble(       observation_period_id = 1:3, person_id = 1:3,       observation_period_start_date = as.Date(\"2000-01-01\"),       observation_period_end_date = as.Date(\"2023-12-31\"),       period_type_concept_id = 0     )   ),   cdmName = \"mock\" ) #> Warning: ! 5 column in person do not match expected column type: #> • `person_id` is numeric but expected integer #> • `gender_concept_id` is numeric but expected integer #> • `year_of_birth` is numeric but expected integer #> • `race_concept_id` is numeric but expected integer #> • `ethnicity_concept_id` is numeric but expected integer #> Warning: ! 1 column in observation_period do not match expected column type: #> • `period_type_concept_id` is numeric but expected integer  cdm[[\"person\"]] #> # A tibble: 3 × 5 #>   person_id gender_concept_id year_of_birth race_concept_id ethnicity_concept_id #> *     <dbl>             <dbl>         <dbl>           <dbl>                <dbl> #> 1         1                 0          1990               0                    0 #> 2         2                 0          1990               0                    0 #> 3         3                 0          1990               0                    0 # }"},{"path":"https://darwin-eu-dev.github.io/omopgenerics/reference/sub-subset-.cdm_reference.html","id":null,"dir":"Reference","previous_headings":"","what":"Assign a table to a cdm reference. — [[<-.cdm_reference","title":"Assign a table to a cdm reference. — [[<-.cdm_reference","text":"Assign table cdm reference.","code":""},{"path":"https://darwin-eu-dev.github.io/omopgenerics/reference/sub-subset-.cdm_reference.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Assign a table to a cdm reference. — [[<-.cdm_reference","text":"","code":"# S3 method for class 'cdm_reference' cdm[[name]] <- value"},{"path":"https://darwin-eu-dev.github.io/omopgenerics/reference/sub-subset-.cdm_reference.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Assign a table to a cdm reference. — [[<-.cdm_reference","text":"cdm cdm reference. name Name assign new table. value Table source cdm object.","code":""},{"path":"https://darwin-eu-dev.github.io/omopgenerics/reference/sub-subset-.cdm_reference.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Assign a table to a cdm reference. — [[<-.cdm_reference","text":"cdm reference.","code":""},{"path":"https://darwin-eu-dev.github.io/omopgenerics/reference/summary.cdm_reference.html","id":null,"dir":"Reference","previous_headings":"","what":"Summary a cdm reference — summary.cdm_reference","title":"Summary a cdm reference — summary.cdm_reference","text":"Summary cdm reference","code":""},{"path":"https://darwin-eu-dev.github.io/omopgenerics/reference/summary.cdm_reference.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Summary a cdm reference — summary.cdm_reference","text":"","code":"# S3 method for class 'cdm_reference' summary(object, ...)"},{"path":"https://darwin-eu-dev.github.io/omopgenerics/reference/summary.cdm_reference.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Summary a cdm reference — summary.cdm_reference","text":"object cdm reference object. ... compatibility (used).","code":""},{"path":"https://darwin-eu-dev.github.io/omopgenerics/reference/summary.cdm_reference.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Summary a cdm reference — summary.cdm_reference","text":"summarised_result object summary data contained cdm.","code":""},{"path":"https://darwin-eu-dev.github.io/omopgenerics/reference/summary.cdm_reference.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Summary a cdm reference — summary.cdm_reference","text":"","code":"library(dplyr, warn.conflicts = FALSE)  person <- tibble(   person_id = 1, gender_concept_id = 0, year_of_birth = 1990,   race_concept_id = 0, ethnicity_concept_id = 0 ) observation_period <- tibble(   observation_period_id = 1, person_id = 1,   observation_period_start_date = as.Date(\"2000-01-01\"),   observation_period_end_date = as.Date(\"2023-12-31\"),   period_type_concept_id = 0 ) cdm <- cdmFromTables(   tables = list(\"person\" = person, \"observation_period\" = observation_period),   cdmName = \"test\" ) #> Warning: ! 5 column in person do not match expected column type: #> • `person_id` is numeric but expected integer #> • `gender_concept_id` is numeric but expected integer #> • `year_of_birth` is numeric but expected integer #> • `race_concept_id` is numeric but expected integer #> • `ethnicity_concept_id` is numeric but expected integer #> Warning: ! 3 column in observation_period do not match expected column type: #> • `observation_period_id` is numeric but expected integer #> • `person_id` is numeric but expected integer #> • `period_type_concept_id` is numeric but expected integer  summary(cdm) #> # A tibble: 13 × 13 #>    result_id cdm_name group_name group_level strata_name strata_level #>        <int> <chr>    <chr>      <chr>       <chr>       <chr>        #>  1         1 test     overall    overall     overall     overall      #>  2         1 test     overall    overall     overall     overall      #>  3         1 test     overall    overall     overall     overall      #>  4         1 test     overall    overall     overall     overall      #>  5         1 test     overall    overall     overall     overall      #>  6         1 test     overall    overall     overall     overall      #>  7         1 test     overall    overall     overall     overall      #>  8         1 test     overall    overall     overall     overall      #>  9         1 test     overall    overall     overall     overall      #> 10         1 test     overall    overall     overall     overall      #> 11         1 test     overall    overall     overall     overall      #> 12         1 test     overall    overall     overall     overall      #> 13         1 test     overall    overall     overall     overall      #> # ℹ 7 more variables: variable_name <chr>, variable_level <chr>, #> #   estimate_name <chr>, estimate_type <chr>, estimate_value <chr>, #> #   additional_name <chr>, additional_level <chr>"},{"path":"https://darwin-eu-dev.github.io/omopgenerics/reference/summary.cohort_table.html","id":null,"dir":"Reference","previous_headings":"","what":"Summary a generated cohort set — summary.cohort_table","title":"Summary a generated cohort set — summary.cohort_table","text":"Summary generated cohort set","code":""},{"path":"https://darwin-eu-dev.github.io/omopgenerics/reference/summary.cohort_table.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Summary a generated cohort set — summary.cohort_table","text":"","code":"# S3 method for class 'cohort_table' summary(object, ...)"},{"path":"https://darwin-eu-dev.github.io/omopgenerics/reference/summary.cohort_table.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Summary a generated cohort set — summary.cohort_table","text":"object generated cohort set object. ... compatibility (used).","code":""},{"path":"https://darwin-eu-dev.github.io/omopgenerics/reference/summary.cohort_table.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Summary a generated cohort set — summary.cohort_table","text":"summarised_result object summary cohort_table.","code":""},{"path":"https://darwin-eu-dev.github.io/omopgenerics/reference/summary.cohort_table.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Summary a generated cohort set — summary.cohort_table","text":"","code":"library(dplyr, warn.conflicts = FALSE)  person <- tibble(   person_id = 1, gender_concept_id = 0, year_of_birth = 1990,   race_concept_id = 0, ethnicity_concept_id = 0 ) observation_period <- tibble(   observation_period_id = 1, person_id = 1,   observation_period_start_date = as.Date(\"2000-01-01\"),   observation_period_end_date = as.Date(\"2023-12-31\"),   period_type_concept_id = 0 ) cdm <- cdmFromTables(   tables = list(\"person\" = person, \"observation_period\" = observation_period),   cdmName = \"test\",   cohortTables = list(\"cohort1\" = tibble(     cohort_definition_id = 1,     subject_id = 1,     cohort_start_date = as.Date(\"2010-01-01\"),     cohort_end_date = as.Date(\"2010-01-05\")   )) ) #> Warning: ! 5 column in person do not match expected column type: #> • `person_id` is numeric but expected integer #> • `gender_concept_id` is numeric but expected integer #> • `year_of_birth` is numeric but expected integer #> • `race_concept_id` is numeric but expected integer #> • `ethnicity_concept_id` is numeric but expected integer #> Warning: ! 3 column in observation_period do not match expected column type: #> • `observation_period_id` is numeric but expected integer #> • `person_id` is numeric but expected integer #> • `period_type_concept_id` is numeric but expected integer #> Warning: ! 2 column in cohort1 do not match expected column type: #> • `cohort_definition_id` is numeric but expected integer #> • `subject_id` is numeric but expected integer  summary(cdm$cohort1) #> # A tibble: 6 × 13 #>   result_id cdm_name group_name  group_level strata_name strata_level            #>       <int> <chr>    <chr>       <chr>       <chr>       <chr>                   #> 1         1 test     cohort_name cohort_1    overall     overall                 #> 2         1 test     cohort_name cohort_1    overall     overall                 #> 3         2 test     cohort_name cohort_1    reason      Initial qualifying eve… #> 4         2 test     cohort_name cohort_1    reason      Initial qualifying eve… #> 5         2 test     cohort_name cohort_1    reason      Initial qualifying eve… #> 6         2 test     cohort_name cohort_1    reason      Initial qualifying eve… #> # ℹ 7 more variables: variable_name <chr>, variable_level <chr>, #> #   estimate_name <chr>, estimate_type <chr>, estimate_value <chr>, #> #   additional_name <chr>, additional_level <chr>"},{"path":"https://darwin-eu-dev.github.io/omopgenerics/reference/summary.summarised_result.html","id":null,"dir":"Reference","previous_headings":"","what":"Summary a summarised_result — summary.summarised_result","title":"Summary a summarised_result — summary.summarised_result","text":"Summary summarised_result","code":""},{"path":"https://darwin-eu-dev.github.io/omopgenerics/reference/summary.summarised_result.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Summary a summarised_result — summary.summarised_result","text":"","code":"# S3 method for class 'summarised_result' summary(object, ...)"},{"path":"https://darwin-eu-dev.github.io/omopgenerics/reference/summary.summarised_result.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Summary a summarised_result — summary.summarised_result","text":"object summarised_result object. ... compatibility (used).","code":""},{"path":"https://darwin-eu-dev.github.io/omopgenerics/reference/summary.summarised_result.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Summary a summarised_result — summary.summarised_result","text":"summary result_types contained summarised_result object.","code":""},{"path":"https://darwin-eu-dev.github.io/omopgenerics/reference/summary.summarised_result.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Summary a summarised_result — summary.summarised_result","text":"","code":"library(dplyr, warn.conflicts = FALSE)  person <- tibble(   person_id = 1, gender_concept_id = 0, year_of_birth = 1990,   race_concept_id = 0, ethnicity_concept_id = 0  ) observation_period <- tibble(   observation_period_id = 1, person_id = 1,   observation_period_start_date = as.Date(\"2000-01-01\"),   observation_period_end_date = as.Date(\"2023-12-31\"),   period_type_concept_id = 0 ) cdm <- cdmFromTables(   tables = list(\"person\" = person, \"observation_period\" = observation_period),   cdmName = \"test\" ) #> Warning: ! 5 column in person do not match expected column type: #> • `person_id` is numeric but expected integer #> • `gender_concept_id` is numeric but expected integer #> • `year_of_birth` is numeric but expected integer #> • `race_concept_id` is numeric but expected integer #> • `ethnicity_concept_id` is numeric but expected integer #> Warning: ! 3 column in observation_period do not match expected column type: #> • `observation_period_id` is numeric but expected integer #> • `person_id` is numeric but expected integer #> • `period_type_concept_id` is numeric but expected integer  result <- summary(cdm)  summary(result) #> A summarised_result object with 13 rows, 1 different result_id, 1 different cdm #> names, and 3 settings. #> CDM names: test. #> Settings: package_name, package_version, and result_type."},{"path":"https://darwin-eu-dev.github.io/omopgenerics/reference/suppress.html","id":null,"dir":"Reference","previous_headings":"","what":"Function to suppress counts in result objects — suppress","title":"Function to suppress counts in result objects — suppress","text":"Function suppress counts result objects","code":""},{"path":"https://darwin-eu-dev.github.io/omopgenerics/reference/suppress.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Function to suppress counts in result objects — suppress","text":"","code":"suppress(result, minCellCount = 5)"},{"path":"https://darwin-eu-dev.github.io/omopgenerics/reference/suppress.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Function to suppress counts in result objects — suppress","text":"result Result object minCellCount Minimum count records report results.","code":""},{"path":"https://darwin-eu-dev.github.io/omopgenerics/reference/suppress.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Function to suppress counts in result objects — suppress","text":"Table suppressed counts","code":""},{"path":"https://darwin-eu-dev.github.io/omopgenerics/reference/suppress.summarised_result.html","id":null,"dir":"Reference","previous_headings":"","what":"Function to suppress counts in result objects — suppress.summarised_result","title":"Function to suppress counts in result objects — suppress.summarised_result","text":"Function suppress counts result objects","code":""},{"path":"https://darwin-eu-dev.github.io/omopgenerics/reference/suppress.summarised_result.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Function to suppress counts in result objects — suppress.summarised_result","text":"","code":"# S3 method for class 'summarised_result' suppress(result, minCellCount = 5)"},{"path":"https://darwin-eu-dev.github.io/omopgenerics/reference/suppress.summarised_result.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Function to suppress counts in result objects — suppress.summarised_result","text":"result summarised_result object. minCellCount Minimum count records report results.","code":""},{"path":"https://darwin-eu-dev.github.io/omopgenerics/reference/suppress.summarised_result.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Function to suppress counts in result objects — suppress.summarised_result","text":"summarised_result suppressed counts.","code":""},{"path":"https://darwin-eu-dev.github.io/omopgenerics/reference/suppress.summarised_result.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Function to suppress counts in result objects — suppress.summarised_result","text":"","code":"library(dplyr, warn.conflicts = FALSE) library(omopgenerics)  my_result <- tibble(   \"result_id\" = \"1\",   \"cdm_name\" = \"mock\",   \"result_type\" = \"summarised_characteristics\",   \"package_name\" = \"omopgenerics\",   \"package_version\" = as.character(utils::packageVersion(\"omopgenerics\")),   \"group_name\" = \"overall\",   \"group_level\" = \"overall\",   \"strata_name\" = c(rep(\"overall\", 6), rep(\"sex\", 3)),   \"strata_level\" = c(rep(\"overall\", 6), \"male\", \"female\", \"female\"),   \"variable_name\" = c(\"number records\", \"age_group\", \"age_group\",   \"age_group\", \"age_group\", \"my_variable\", \"number records\", \"age_group\",   \"age_group\"),   \"variable_level\" = c(NA, \"<50\", \"<50\", \">=50\", \">=50\", NA, NA,   \"<50\", \"<50\"),   \"estimate_name\" = c(\"count\", \"count\", \"percentage\", \"count\", \"percentage\",   \"random\", \"count\", \"count\", \"percentage\"),   \"estimate_type\" = c(\"integer\", \"integer\", \"percentage\", \"integer\",   \"percentage\", \"numeric\", \"integer\", \"integer\", \"percentage\"),   \"estimate_value\" = c(\"10\", \"5\", \"50\", \"3\", \"30\", \"1\", \"3\", \"12\", \"6\"),   \"additional_name\" = \"overall\",   \"additional_level\" = \"overall\" ) my_result <- newSummarisedResult(my_result) #> ! The following variables: result_type, package_name, package_version; were added to `settings` #> ! The following column type were changed: #> • result_id: from character to integer my_result |> glimpse() #> Rows: 9 #> Columns: 13 #> $ result_id        <int> 1, 1, 1, 1, 1, 1, 1, 1, 1 #> $ cdm_name         <chr> \"mock\", \"mock\", \"mock\", \"mock\", \"mock\", \"mock\", \"mock… #> $ group_name       <chr> \"overall\", \"overall\", \"overall\", \"overall\", \"overall\"… #> $ group_level      <chr> \"overall\", \"overall\", \"overall\", \"overall\", \"overall\"… #> $ strata_name      <chr> \"overall\", \"overall\", \"overall\", \"overall\", \"overall\"… #> $ strata_level     <chr> \"overall\", \"overall\", \"overall\", \"overall\", \"overall\"… #> $ variable_name    <chr> \"number records\", \"age_group\", \"age_group\", \"age_grou… #> $ variable_level   <chr> NA, \"<50\", \"<50\", \">=50\", \">=50\", NA, NA, \"<50\", \"<50\" #> $ estimate_name    <chr> \"count\", \"count\", \"percentage\", \"count\", \"percentage\"… #> $ estimate_type    <chr> \"integer\", \"integer\", \"percentage\", \"integer\", \"perce… #> $ estimate_value   <chr> \"10\", \"5\", \"50\", \"3\", \"30\", \"1\", \"3\", \"12\", \"6\" #> $ additional_name  <chr> \"overall\", \"overall\", \"overall\", \"overall\", \"overall\"… #> $ additional_level <chr> \"overall\", \"overall\", \"overall\", \"overall\", \"overall\"… my_result <- suppress(my_result, minCellCount = 5) my_result |> glimpse() #> Rows: 9 #> Columns: 13 #> $ result_id        <int> 1, 1, 1, 1, 1, 1, 1, 1, 1 #> $ cdm_name         <chr> \"mock\", \"mock\", \"mock\", \"mock\", \"mock\", \"mock\", \"mock… #> $ group_name       <chr> \"overall\", \"overall\", \"overall\", \"overall\", \"overall\"… #> $ group_level      <chr> \"overall\", \"overall\", \"overall\", \"overall\", \"overall\"… #> $ strata_name      <chr> \"overall\", \"overall\", \"overall\", \"overall\", \"overall\"… #> $ strata_level     <chr> \"overall\", \"overall\", \"overall\", \"overall\", \"overall\"… #> $ variable_name    <chr> \"number records\", \"age_group\", \"age_group\", \"age_grou… #> $ variable_level   <chr> NA, \"<50\", \"<50\", \">=50\", \">=50\", NA, NA, \"<50\", \"<50\" #> $ estimate_name    <chr> \"count\", \"count\", \"percentage\", \"count\", \"percentage\"… #> $ estimate_type    <chr> \"integer\", \"integer\", \"percentage\", \"integer\", \"perce… #> $ estimate_value   <chr> \"10\", \"5\", \"50\", NA, NA, \"1\", NA, \"12\", \"6\" #> $ additional_name  <chr> \"overall\", \"overall\", \"overall\", \"overall\", \"overall\"… #> $ additional_level <chr> \"overall\", \"overall\", \"overall\", \"overall\", \"overall\"…"},{"path":"https://darwin-eu-dev.github.io/omopgenerics/reference/tableName.html","id":null,"dir":"Reference","previous_headings":"","what":"Get the table name of a cdm_table. — tableName","title":"Get the table name of a cdm_table. — tableName","text":"Get table name cdm_table.","code":""},{"path":"https://darwin-eu-dev.github.io/omopgenerics/reference/tableName.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get the table name of a cdm_table. — tableName","text":"","code":"tableName(table)"},{"path":"https://darwin-eu-dev.github.io/omopgenerics/reference/tableName.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get the table name of a cdm_table. — tableName","text":"table cdm_table.","code":""},{"path":"https://darwin-eu-dev.github.io/omopgenerics/reference/tableName.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get the table name of a cdm_table. — tableName","text":"character name.","code":""},{"path":"https://darwin-eu-dev.github.io/omopgenerics/reference/tableName.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get the table name of a cdm_table. — tableName","text":"","code":"# \\donttest{ library(omopgenerics) library(dplyr, warn.conflicts = FALSE)  cdm <- cdmFromTables(   tables = list(     \"person\" = tibble(       person_id = c(1, 2, 3), gender_concept_id = 0, year_of_birth = 1990,       race_concept_id = 0, ethnicity_concept_id = 0     ),     \"observation_period\" = tibble(       observation_period_id = 1:3, person_id = 1:3,       observation_period_start_date = as.Date(\"2000-01-01\"),       observation_period_end_date = as.Date(\"2023-12-31\"),       period_type_concept_id = 0     )   ),   cdmName = \"mock\" ) #> Warning: ! 5 column in person do not match expected column type: #> • `person_id` is numeric but expected integer #> • `gender_concept_id` is numeric but expected integer #> • `year_of_birth` is numeric but expected integer #> • `race_concept_id` is numeric but expected integer #> • `ethnicity_concept_id` is numeric but expected integer #> Warning: ! 1 column in observation_period do not match expected column type: #> • `period_type_concept_id` is numeric but expected integer  tableName(cdm$person) #> [1] \"person\" # }"},{"path":"https://darwin-eu-dev.github.io/omopgenerics/reference/tableSource.html","id":null,"dir":"Reference","previous_headings":"","what":"Get the table source of a cdm_table. — tableSource","title":"Get the table source of a cdm_table. — tableSource","text":"Get table source cdm_table.","code":""},{"path":"https://darwin-eu-dev.github.io/omopgenerics/reference/tableSource.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get the table source of a cdm_table. — tableSource","text":"","code":"tableSource(table)"},{"path":"https://darwin-eu-dev.github.io/omopgenerics/reference/tableSource.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get the table source of a cdm_table. — tableSource","text":"table cdm_table.","code":""},{"path":"https://darwin-eu-dev.github.io/omopgenerics/reference/tableSource.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get the table source of a cdm_table. — tableSource","text":"cdm_source object.","code":""},{"path":"https://darwin-eu-dev.github.io/omopgenerics/reference/tableSource.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get the table source of a cdm_table. — tableSource","text":"","code":"# \\donttest{ library(omopgenerics) library(dplyr, warn.conflicts = FALSE)  cdm <- cdmFromTables(   tables = list(     \"person\" = tibble(       person_id = c(1, 2, 3), gender_concept_id = 0, year_of_birth = 1990,       race_concept_id = 0, ethnicity_concept_id = 0     ),     \"observation_period\" = tibble(       observation_period_id = 1:3, person_id = 1:3,       observation_period_start_date = as.Date(\"2000-01-01\"),       observation_period_end_date = as.Date(\"2023-12-31\"),       period_type_concept_id = 0     )   ),   cdmName = \"mock\" ) #> Warning: ! 5 column in person do not match expected column type: #> • `person_id` is numeric but expected integer #> • `gender_concept_id` is numeric but expected integer #> • `year_of_birth` is numeric but expected integer #> • `race_concept_id` is numeric but expected integer #> • `ethnicity_concept_id` is numeric but expected integer #> Warning: ! 1 column in observation_period do not match expected column type: #> • `period_type_concept_id` is numeric but expected integer  tableSource(cdm$person) #> This is a local cdm source # }"},{"path":"https://darwin-eu-dev.github.io/omopgenerics/reference/tmpPrefix.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a temporary prefix for tables, that contains a unique prefix that starts with tmp. — tmpPrefix","title":"Create a temporary prefix for tables, that contains a unique prefix that starts with tmp. — tmpPrefix","text":"Create temporary prefix tables, contains unique prefix starts tmp.","code":""},{"path":"https://darwin-eu-dev.github.io/omopgenerics/reference/tmpPrefix.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a temporary prefix for tables, that contains a unique prefix that starts with tmp. — tmpPrefix","text":"","code":"tmpPrefix()"},{"path":"https://darwin-eu-dev.github.io/omopgenerics/reference/tmpPrefix.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create a temporary prefix for tables, that contains a unique prefix that starts with tmp. — tmpPrefix","text":"temporary prefix.","code":""},{"path":"https://darwin-eu-dev.github.io/omopgenerics/reference/tmpPrefix.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create a temporary prefix for tables, that contains a unique prefix that starts with tmp. — tmpPrefix","text":"","code":"library(omopgenerics) tmpPrefix() #> [1] \"tmp_002_\""},{"path":"https://darwin-eu-dev.github.io/omopgenerics/reference/toSnakeCase.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert a character vector to snake case — toSnakeCase","title":"Convert a character vector to snake case — toSnakeCase","text":"Convert character vector snake case","code":""},{"path":"https://darwin-eu-dev.github.io/omopgenerics/reference/toSnakeCase.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convert a character vector to snake case — toSnakeCase","text":"","code":"toSnakeCase(x)"},{"path":"https://darwin-eu-dev.github.io/omopgenerics/reference/toSnakeCase.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convert a character vector to snake case — toSnakeCase","text":"x Character vector convert","code":""},{"path":"https://darwin-eu-dev.github.io/omopgenerics/reference/toSnakeCase.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Convert a character vector to snake case — toSnakeCase","text":"snake_case vector","code":""},{"path":"https://darwin-eu-dev.github.io/omopgenerics/reference/toSnakeCase.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Convert a character vector to snake case — toSnakeCase","text":"","code":"toSnakeCase(\"myVariable\") #> [1] \"my_variable\"  toSnakeCase(c(\"cohort1\", \"Cohort22b\")) #> [1] \"cohort1\"   \"cohort22b\""},{"path":"https://darwin-eu-dev.github.io/omopgenerics/reference/uniqueId.html","id":null,"dir":"Reference","previous_headings":"","what":"Get a unique Identifier with a certain number of characters and a prefix. — uniqueId","title":"Get a unique Identifier with a certain number of characters and a prefix. — uniqueId","text":"Get unique Identifier certain number characters prefix.","code":""},{"path":"https://darwin-eu-dev.github.io/omopgenerics/reference/uniqueId.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get a unique Identifier with a certain number of characters and a prefix. — uniqueId","text":"","code":"uniqueId(n = 1, exclude = character(), nChar = 3, prefix = \"id_\")"},{"path":"https://darwin-eu-dev.github.io/omopgenerics/reference/uniqueId.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get a unique Identifier with a certain number of characters and a prefix. — uniqueId","text":"n Number identifiers. exclude Columns exclude. nChar Number characters. prefix prefix identifiers.","code":""},{"path":"https://darwin-eu-dev.github.io/omopgenerics/reference/uniqueId.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get a unique Identifier with a certain number of characters and a prefix. — uniqueId","text":"character vector n unique identifiers.","code":""},{"path":"https://darwin-eu-dev.github.io/omopgenerics/reference/uniqueTableName.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a unique table name — uniqueTableName","title":"Create a unique table name — uniqueTableName","text":"Create unique table name","code":""},{"path":"https://darwin-eu-dev.github.io/omopgenerics/reference/uniqueTableName.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a unique table name — uniqueTableName","text":"","code":"uniqueTableName(prefix = \"\")"},{"path":"https://darwin-eu-dev.github.io/omopgenerics/reference/uniqueTableName.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a unique table name — uniqueTableName","text":"prefix Prefix table names.","code":""},{"path":"https://darwin-eu-dev.github.io/omopgenerics/reference/uniqueTableName.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create a unique table name — uniqueTableName","text":"string can used dbplyr temp table name","code":""},{"path":"https://darwin-eu-dev.github.io/omopgenerics/reference/uniqueTableName.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create a unique table name — uniqueTableName","text":"","code":"library(omopgenerics) uniqueTableName() #> [1] \"og_002_1726613587\""},{"path":"https://darwin-eu-dev.github.io/omopgenerics/reference/validateAgeGroupArgument.html","id":null,"dir":"Reference","previous_headings":"","what":"validateAgeGroupArgument — validateAgeGroupArgument","title":"validateAgeGroupArgument — validateAgeGroupArgument","text":"validateAgeGroupArgument","code":""},{"path":"https://darwin-eu-dev.github.io/omopgenerics/reference/validateAgeGroupArgument.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"validateAgeGroupArgument — validateAgeGroupArgument","text":"","code":"validateAgeGroupArgument(   ageGroup,   multipleAgeGroup = TRUE,   overlap = FALSE,   null = TRUE,   ageGroupName = \"age_group\",   call = parent.frame() )"},{"path":"https://darwin-eu-dev.github.io/omopgenerics/reference/validateAgeGroupArgument.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"validateAgeGroupArgument — validateAgeGroupArgument","text":"ageGroup age group list. multipleAgeGroup allow mutliple age group. overlap allow overlapping ageGroup. null null age group allowed true false. ageGroupName Name default age group. call parent frame.","code":""},{"path":"https://darwin-eu-dev.github.io/omopgenerics/reference/validateAgeGroupArgument.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"validateAgeGroupArgument — validateAgeGroupArgument","text":"validate ageGroup","code":""},{"path":"https://darwin-eu-dev.github.io/omopgenerics/reference/validateCdmArgument.html","id":null,"dir":"Reference","previous_headings":"","what":"validateCdmArgument — validateCdmArgument","title":"validateCdmArgument — validateCdmArgument","text":"validateCdmArgument","code":""},{"path":"https://darwin-eu-dev.github.io/omopgenerics/reference/validateCdmArgument.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"validateCdmArgument — validateCdmArgument","text":"","code":"validateCdmArgument(   cdm,   checkOverlapObservation = FALSE,   checkStartBeforeEndObservation = FALSE,   checkPlausibleObservationDates = FALSE,   checkPerson = FALSE,   validation = \"error\",   call = parent.frame() )"},{"path":"https://darwin-eu-dev.github.io/omopgenerics/reference/validateCdmArgument.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"validateCdmArgument — validateCdmArgument","text":"cdm cdm_reference object checkOverlapObservation TRUE perform check overlap observation period checkStartBeforeEndObservation TRUE perform check correct observational start end date checkPlausibleObservationDates TRUE perform check implausible observation period start dates (1800-01-01) end dates (current date) checkPerson TRUE perform check person id clincial table person table validation perform validation: \"error\", \"warning\". call call argument pass cli functions.","code":""},{"path":"https://darwin-eu-dev.github.io/omopgenerics/reference/validateCdmArgument.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"validateCdmArgument — validateCdmArgument","text":"cdm_reference object","code":""},{"path":"https://darwin-eu-dev.github.io/omopgenerics/reference/validateCohortArgument.html","id":null,"dir":"Reference","previous_headings":"","what":"Validate a cohort table input. — validateCohortArgument","title":"Validate a cohort table input. — validateCohortArgument","text":"Validate cohort table input.","code":""},{"path":"https://darwin-eu-dev.github.io/omopgenerics/reference/validateCohortArgument.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Validate a cohort table input. — validateCohortArgument","text":"","code":"validateCohortArgument(   cohort,   checkEndAfterStart = FALSE,   checkOverlappingEntries = FALSE,   checkMissingValues = FALSE,   checkInObservation = FALSE,   validation = \"error\",   call = parent.frame() )"},{"path":"https://darwin-eu-dev.github.io/omopgenerics/reference/validateCohortArgument.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Validate a cohort table input. — validateCohortArgument","text":"cohort Object validated valid cohort input. checkEndAfterStart TRUE check cohort end dates come cohort start date performed. checkOverlappingEntries TRUE check individuals overlapping cohort entries performed. checkMissingValues TRUE check missing values required fields performed. checkInObservation TRUE check cohort entries within individuals observation periods performed. validation perform validation: \"error\", \"warning\". call call argument pass cli functions.","code":""},{"path":"https://darwin-eu-dev.github.io/omopgenerics/reference/validateCohortIdArgument.html","id":null,"dir":"Reference","previous_headings":"","what":"Validate cohortId argument. — validateCohortIdArgument","title":"Validate cohortId argument. — validateCohortIdArgument","text":"Validate cohortId argument.","code":""},{"path":"https://darwin-eu-dev.github.io/omopgenerics/reference/validateCohortIdArgument.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Validate cohortId argument. — validateCohortIdArgument","text":"","code":"validateCohortIdArgument(   cohortId,   cohort,   validation = \"error\",   call = parent.frame() )"},{"path":"https://darwin-eu-dev.github.io/omopgenerics/reference/validateCohortIdArgument.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Validate cohortId argument. — validateCohortIdArgument","text":"cohortId cohortId vector validated. cohort cohort_table object. validation perform validation: \"error\", \"warning\". call call argument pass cli functions.","code":""},{"path":"https://darwin-eu-dev.github.io/omopgenerics/reference/validateConceptSetArgument.html","id":null,"dir":"Reference","previous_headings":"","what":"Validate conceptSet argument. — validateConceptSetArgument","title":"Validate conceptSet argument. — validateConceptSetArgument","text":"Validate conceptSet argument.","code":""},{"path":"https://darwin-eu-dev.github.io/omopgenerics/reference/validateConceptSetArgument.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Validate conceptSet argument. — validateConceptSetArgument","text":"","code":"validateConceptSetArgument(   conceptSet,   cdm = NULL,   validation = \"error\",   call = parent.frame() )"},{"path":"https://darwin-eu-dev.github.io/omopgenerics/reference/validateConceptSetArgument.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Validate conceptSet argument. — validateConceptSetArgument","text":"conceptSet can either named list concepts codelist, codelist_with_details conceptSetExpression object. cdm cdm_reference object, needed conceptSetExpression provided. validation perform validation: \"error\", \"warning\". call call argument pass cli functions.","code":""},{"path":"https://darwin-eu-dev.github.io/omopgenerics/reference/validateNameArgument.html","id":null,"dir":"Reference","previous_headings":"","what":"Validate name argument. — validateNameArgument","title":"Validate name argument. — validateNameArgument","text":"Validate name argument.","code":""},{"path":"https://darwin-eu-dev.github.io/omopgenerics/reference/validateNameArgument.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Validate name argument. — validateNameArgument","text":"","code":"validateNameArgument(   name,   cdm = NULL,   validation = \"error\",   null = FALSE,   call = parent.frame() )"},{"path":"https://darwin-eu-dev.github.io/omopgenerics/reference/validateNameArgument.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Validate name argument. — validateNameArgument","text":"name Name new table added cdm object. cdm cdm_reference object. check table named name already exists cdm. validation perform validation: \"error\", \"warning\". null TRUE, name can NULL call call argument pass cli functions.","code":""},{"path":"https://darwin-eu-dev.github.io/omopgenerics/reference/validateNameLevel.html","id":null,"dir":"Reference","previous_headings":"","what":"Validate if two columns are valid Name-Level pair. — validateNameLevel","title":"Validate if two columns are valid Name-Level pair. — validateNameLevel","text":"Validate two columns valid Name-Level pair.","code":""},{"path":"https://darwin-eu-dev.github.io/omopgenerics/reference/validateNameLevel.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Validate if two columns are valid Name-Level pair. — validateNameLevel","text":"","code":"validateNameLevel(x, nameColumn, levelColumn, sep = \" &&& \", warn = FALSE)"},{"path":"https://darwin-eu-dev.github.io/omopgenerics/reference/validateNameLevel.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Validate if two columns are valid Name-Level pair. — validateNameLevel","text":"x tibble. nameColumn Column name name. levelColumn Column name level. sep Separation pattern. warn Whether throw warning (TRUE) error (FALSE).","code":""},{"path":"https://darwin-eu-dev.github.io/omopgenerics/reference/validateResultArguemnt.html","id":null,"dir":"Reference","previous_headings":"","what":"validateResultArgument — validateResultArguemnt","title":"validateResultArgument — validateResultArguemnt","text":"validateResultArgument","code":""},{"path":"https://darwin-eu-dev.github.io/omopgenerics/reference/validateResultArguemnt.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"validateResultArgument — validateResultArguemnt","text":"","code":"validateResultArguemnt(result, validation = \"error\", call = parent.frame())"},{"path":"https://darwin-eu-dev.github.io/omopgenerics/reference/validateResultArguemnt.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"validateResultArgument — validateResultArguemnt","text":"result summarise result object validate validation message return call parent.frame","code":""},{"path":"https://darwin-eu-dev.github.io/omopgenerics/reference/validateResultArguemnt.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"validateResultArgument — validateResultArguemnt","text":"summarise result object","code":""},{"path":"https://darwin-eu-dev.github.io/omopgenerics/reference/validateResultArgument.html","id":null,"dir":"Reference","previous_headings":"","what":"validateResultArgument — validateResultArgument","title":"validateResultArgument — validateResultArgument","text":"validateResultArgument","code":""},{"path":"https://darwin-eu-dev.github.io/omopgenerics/reference/validateResultArgument.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"validateResultArgument — validateResultArgument","text":"","code":"validateResultArgument(result, validation = \"error\", call = parent.frame())"},{"path":"https://darwin-eu-dev.github.io/omopgenerics/reference/validateResultArgument.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"validateResultArgument — validateResultArgument","text":"result summarise result object validate validation message return call parent.frame","code":""},{"path":"https://darwin-eu-dev.github.io/omopgenerics/reference/validateResultArgument.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"validateResultArgument — validateResultArgument","text":"summarise result object","code":""},{"path":"https://darwin-eu-dev.github.io/omopgenerics/reference/validateWindowArgument.html","id":null,"dir":"Reference","previous_headings":"","what":"validateWindowArgument — validateWindowArgument","title":"validateWindowArgument — validateWindowArgument","text":"validateWindowArgument","code":""},{"path":"https://darwin-eu-dev.github.io/omopgenerics/reference/validateWindowArgument.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"validateWindowArgument — validateWindowArgument","text":"","code":"validateWindowArgument(window, snakeCase = TRUE, call = parent.frame())"},{"path":"https://darwin-eu-dev.github.io/omopgenerics/reference/validateWindowArgument.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"validateWindowArgument — validateWindowArgument","text":"window time window snakeCase return default window  name snake case TRUE call call argument pass cli functions.","code":""},{"path":"https://darwin-eu-dev.github.io/omopgenerics/reference/validateWindowArgument.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"validateWindowArgument — validateWindowArgument","text":"time window","code":""}]
